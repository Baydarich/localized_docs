
msgid ""
msgstr ""
"Project-Id-Version: Hyperledger Iroha Documentation\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2018-12-16 20:34+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: fr\n"
"Language-Team: fr <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../iroha/docs/source/guides/libraries/android.rst:2
msgid "Android Library"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:4
msgid ""
"The library, in essence, is a set of Java interfaces and binary libraries"
" compiled for different architectures. Supported architectures are *arm, "
"x86, x86_64*."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:7
msgid "Where to Get"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:9
msgid "There are two ways to get Iroha library for Android:"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:11
msgid ""
"Grab via Gradle (see details in the section `Importing the Library from "
"jcenter`_)"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:17
msgid "Compile the library on your own."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:19
msgid "Both options are described in the following sections."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:22
msgid "Manual Build"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:24
msgid "The guide was tested on systems running Ubuntu 16.04 and macOS."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:27
msgid "Prerequisites"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:30
msgid "Android NDK"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:30
msgid ""
"Please `download "
"<https://developer.android.com/ndk/downloads/index.html>`__ and unpack "
"NDK to any suitable folder."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:33
msgid "Automake, Bison, Cmake"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:33
msgid ""
"Please refer to the page `Installing Dependencies <dependencies.html>`__ "
"to get installation recipes for the tools."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:36
msgid "Building the Library"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:38
msgid ""
"All you need now is to download `build script "
"<https://github.com/hyperledger/iroha/blob/develop/shared_model/packages/android"
"/android-build.sh>`__ ``android-build.sh`` to any empty folder and launch"
" it there."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:41
msgid "Launch parameters are listed in the table below."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:44
msgid "Position"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:44
msgid "Required"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:44
msgid "Parameter Name"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:44
msgid "Description"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:44
msgid "Possible Values"
msgstr "Valeurs possibles"

#: ../iroha/docs/source/guides/libraries/android.rst:46
msgid "1"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:46
#: ../iroha/docs/source/guides/libraries/android.rst:49
#: ../iroha/docs/source/guides/libraries/android.rst:52
#: ../iroha/docs/source/guides/libraries/android.rst:55
msgid "Yes"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:46
msgid "**Platform Name**"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:46
msgid "Name of the target platform for binary part of the library."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:46
msgid "``arm64-v8a``, ``armeabi-v7a``, ``armeabi``, ``x86``, ``x86_64``"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:49
msgid "2"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:49
msgid "**Android API Level**"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:49
msgid "API level supported by your NDK. See the link under the table for details."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:49
msgid "``27`` for android-ndk-r16b"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:52
msgid "3"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:52
msgid "**Android NDK Path**"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:52
msgid ""
"Full path to unpacked NDK. Please ensure that path does not contain "
"spaces."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:52
msgid "``/home/user/lib/android-ndk-r16b``"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:55
msgid "4"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:55
msgid "**Java Package Name**"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:55
msgid ""
"Package name that will be used for Java interfaces generation. Note that "
"the binary also depends on chosen package name."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:55
msgid "``jp.co.soramitsu.iroha.android``"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:59
msgid "5"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:59
msgid "No"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:59
msgid "**Build Type**"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:59
msgid ""
"Defines build mode of binary part of the library. ``Release`` is the "
"default option."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:59
msgid "``Debug`` or ``Release``"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:64
msgid ""
"`Android API levels <https://developer.android.com/guide/topics/manifest"
"/uses-sdk-element.html#ApiLevels>`__"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:66
msgid ""
"Please use the same root part of Java package name for library build as "
"you use for your Android project. For example, your project is located in"
" a package called ``com.mycompany.androidapp``, so please consider to "
"build the library in a package, which name starts with "
"``com.mycompany.androidapp`` (e.g. ``com.mycompany.androidapp.iroha``)."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:70
msgid "A couple of launch commands examples:"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:80
msgid ""
"Build artefacts will be collected in ``lib`` directory near the script "
"``android-build.sh``. There will be two files - an archive "
"``bindings.zip`` and ``libirohajava.so``."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:85
msgid "How to Use/Import"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:88
msgid "Importing the Library from jcenter"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:90
msgid ""
"The easiest way to use Irohalib for Android is to import the library "
"dependency from `jcenter <https://bintray.com/bulatmukhutdinov/maven"
"/iroha-android-bindings>`__."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:92
msgid "All you need to do is a simple set of four steps:"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:94
msgid "Add to your ``build.gradle`` file the following line:"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:100
msgid ""
"Copy the latest version of ``*.proto`` files from ``develop`` branch of "
"Iroha `repository "
"<https://github.com/hyperledger/iroha/tree/develop/schema>`__ into "
"``app/src/main/proto/`` folder inside your project in Android Studio."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:103
msgid "The resulting directory structure should look like as follows:"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:126
msgid ""
"Create additional directories ``app/src/main/proto/google/protobuf/`` and"
" place there a file called ``empty.proto`` with the following contents:"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:141
msgid ""
"Add ``protobuf`` and ``grpc`` dependecies and protobuf configuration "
"block into your ``build.gradle`` file."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:186
msgid "How to Use Manually Built Library"
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:188
msgid ""
"Create directory structure inside your Android project according to the "
"package name of build library. Put there all the ``.java`` files from "
"``bindings.zip`` archive. For example, the path could be "
"``app/src/main/java/com/mycompany/iroha`` if you built the library with "
"``com.mycompany.iroha`` package name."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:193
msgid ""
"Create directory ``app/src/main/jniLibs/<platform>`` where ``<platform>``"
" is the name of target platform (e.g. ``arm64-v8a``). Put there "
"``libirohajava.so``. Repeat this step for all required platforms (in this"
" case you need to build the library for each platform)."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:197
msgid ""
"Repeat steps 2-4 from the previous section `Importing the Library from "
"jcenter`_."
msgstr ""

#: ../iroha/docs/source/guides/libraries/android.rst:201
msgid "Example Code"
msgstr "Exemple de code"

#: ../iroha/docs/source/guides/libraries/android.rst:203
msgid ""
"Explore ``bindings`` branch of `iroha-android "
"<https://github.com/hyperledger/iroha-android/tree/bindings>`__ "
"repository to get source code and view sample application."
msgstr ""

#~ msgid "Configuration"
#~ msgstr "Configuration"

#~ msgid ""
#~ "In this section we will understand "
#~ "how to configure Iroha. Let's take "
#~ "a look at ``example/config.sample``"
#~ msgstr ""

#~ msgid ""
#~ "As you can see, configuration file "
#~ "is a valid ``json`` structure. Let's "
#~ "go line-by-line and understand "
#~ "what every parameter means."
#~ msgstr ""

#~ msgid "Deployment-specific parameters"
#~ msgstr "Paramètres liés au déploiement"

#~ msgid "``block_store_path`` sets path to the folder where blocks are stored."
#~ msgstr ""

#~ msgid ""
#~ "``torii_port`` sets the port for "
#~ "external communications. Queries and "
#~ "transactions are sent here."
#~ msgstr ""

#~ msgid ""
#~ "``internal_port`` sets the port for "
#~ "internal communications: ordering service, "
#~ "consensus and block loader."
#~ msgstr ""

#~ msgid ""
#~ "``pg_opt`` is used for setting "
#~ "credentials of PostgreSQL: hostname, port, "
#~ "username and password."
#~ msgstr ""

#~ msgid "Environment-specific parameters"
#~ msgstr ""

#~ msgid ""
#~ "``max_proposal_size`` is the maximum amount"
#~ " of transactions that can be in "
#~ "one proposal, and as a result in"
#~ " a single block as well. So, by"
#~ " changing this value you define the"
#~ " size of potential block. For a "
#~ "starter you can stick to ``10``. "
#~ "However, we recommend to increase this"
#~ " number if you have a lot of"
#~ " transactions per second."
#~ msgstr ""

#~ msgid ""
#~ "``proposal_delay`` is a maximum waiting "
#~ "time in milliseconds before emitting a"
#~ " new proposal. Proposal is emitted if"
#~ " the ``max_proposal_size`` is reached or"
#~ " ``proposal_delay`` milliseconds had passed. "
#~ "You can start with ``5000`` and "
#~ "increase this number if you have a"
#~ " lot of transactions per second since"
#~ " it is likely that with an "
#~ "intense load (over 100 transactions per"
#~ " second) and low value of "
#~ "``proposal_delay`` there will be many "
#~ "proposals of small size."
#~ msgstr ""

#~ msgid ""
#~ "``vote_delay`` is a waiting time in "
#~ "milliseconds before sending vote to the"
#~ " next peer. Optimal value depends "
#~ "heavily on the amount of Iroha "
#~ "peers in the network (higher amount "
#~ "of nodes requires longer ``vote_delay``). "
#~ "We recommend to start with 100-1000 "
#~ "milliseconds."
#~ msgstr ""

#~ msgid ""
#~ "``load_delay`` is a waiting time in "
#~ "milliseconds before loading committed block"
#~ " from next peer. We recommend setting"
#~ " this number the same value as "
#~ "``proposal_delay`` or even higher."
#~ msgstr ""

#~ msgid "Commands"
#~ msgstr "Commandes"

#~ msgid "Add asset quantity"
#~ msgstr "Ajouter une quantité d'actif"

#~ msgid "Add peer"
#~ msgstr "Ajouter un pair"

#~ msgid "Add signatory"
#~ msgstr "Ajouter une signature"

#~ msgid "Append role"
#~ msgstr "Ajouter un rôle"

#~ msgid "Create account"
#~ msgstr "Créer un compte"

#~ msgid "Create asset"
#~ msgstr ""

#~ msgid "Create domain"
#~ msgstr ""

#~ msgid "Create role"
#~ msgstr "Créer un rôle"

#~ msgid "Detach role"
#~ msgstr ""

#~ msgid "Grant permission"
#~ msgstr "Accorder la permission"

#~ msgid "Revoke permission"
#~ msgstr "Révoquer la permission"

#~ msgid "Set account detail"
#~ msgstr ""

#~ msgid "Set account quorum"
#~ msgstr ""

#~ msgid "Subtract asset quantity"
#~ msgstr ""

#~ msgid "Transfer asset"
#~ msgstr ""

#~ msgid "С++ library"
#~ msgstr ""

#~ msgid ""
#~ "This section only contains code "
#~ "reference (autogenerated docs are possible "
#~ "with a description of arguments and "
#~ "return values)"
#~ msgstr ""

#~ msgid "Iroha API reference"
#~ msgstr ""

#~ msgid ""
#~ "In API section we will take a "
#~ "look at building blocks of an "
#~ "application interacting with Iroha. We "
#~ "will overview commands and queries that"
#~ " the system have, and the set "
#~ "of client libraries encompassing transport "
#~ "and application layer logic."
#~ msgstr ""

#~ msgid "Table of contents"
#~ msgstr "Table des matières"

#~ msgid "Java library"
#~ msgstr "Librairie Java"

#~ msgid "NodeJS library"
#~ msgstr "Librairie NodeJS"

#~ msgid "Objective-C library"
#~ msgstr ""

#~ msgid "Python library"
#~ msgstr ""

#~ msgid "Queries"
#~ msgstr "Requêtes"

#~ msgid "Get account"
#~ msgstr ""

#~ msgid "Get signatories"
#~ msgstr ""

#~ msgid "Get transactions"
#~ msgstr ""

#~ msgid "Get account transactions"
#~ msgstr ""

#~ msgid "Get account asset transactions"
#~ msgstr ""

#~ msgid "Get account assets"
#~ msgstr ""

#~ msgid "Get asset info"
#~ msgstr ""

#~ msgid "Get roles"
#~ msgstr ""

#~ msgid "Get role permissions"
#~ msgstr "Récupérer les permissions d'un rôle"

#~ msgid "Swift library"
#~ msgstr ""

#~ msgid "Contribution"
#~ msgstr ""

#~ msgid "Code of conduct"
#~ msgstr ""

#~ msgid "Process"
#~ msgstr ""

#~ msgid "Communication"
#~ msgstr ""

#~ msgid "Issue tracker"
#~ msgstr ""

#~ msgid "A term"
#~ msgstr ""

#~ msgid "B term"
#~ msgstr ""

#~ msgid "C term"
#~ msgstr ""

#~ msgid "Remaining parts (WSV, etc.)"
#~ msgstr ""

#~ msgid "Core concepts"
#~ msgstr ""

#~ msgid ""
#~ "Why Iroha runs in a network? How"
#~ " to understand the objects inside and"
#~ " outside the system? How peers in "
#~ "the network collaborate and decide which"
#~ " data to put into the blockchain? "
#~ "We will look through the basics of"
#~ " Iroha in this section."
#~ msgstr ""

#~ msgid "Is having an account in Iroha means being a user?"
#~ msgstr ""

#~ msgid "Are there differences compared to client-server systems?"
#~ msgstr ""

#~ msgid "Assets, domains and other internal objects"
#~ msgstr ""

#~ msgid "Does everyone have to maintain their own peer?"
#~ msgstr ""

#~ msgid "How peers communicate with each other?"
#~ msgstr ""

#~ msgid "ER model"
#~ msgstr ""

#~ msgid "Transaction"
#~ msgstr ""

#~ msgid "Transaction statuses"
#~ msgstr ""

#~ msgid "Query"
#~ msgstr "Requête"

#~ msgid "Validation"
#~ msgstr ""

#~ msgid "Stateless"
#~ msgstr ""

#~ msgid "Stateful"
#~ msgstr ""

#~ msgid "Glossary"
#~ msgstr ""

#~ msgid "Getting Started"
#~ msgstr ""

#~ msgid ""
#~ "In this guide, we will create a"
#~ " very basic Iroha network, launch it,"
#~ " create a couple of transactions, and"
#~ " check the data written in the "
#~ "ledger. To keep things simple, we "
#~ "will use Docker."
#~ msgstr ""

#~ msgid ""
#~ "Ledger is the synonym for a "
#~ "blockchain, and Hyperledger Iroha is "
#~ "known also as Distributed Ledger "
#~ "Technology — which in essence is "
#~ "the same as \"blockchain framework\". "
#~ "You can check the rest of "
#~ "terminology used in the Glossary "
#~ "section."
#~ msgstr ""

#~ msgid ""
#~ "For this guide, you need a "
#~ "computer running Unix-like system with"
#~ " ``docker`` installed. You can read "
#~ "how to install it on a `Docker's"
#~ " website <https://www.docker.com/community-edition/>`_."
#~ msgstr ""

#~ msgid ""
#~ "Please note that you can use Iroha"
#~ " without ``docker`` as well. You can"
#~ " read about it in other parts "
#~ "of documentation."
#~ msgstr ""

#~ msgid "Starting Iroha Node"
#~ msgstr ""

#~ msgid "Creating a Docker Network"
#~ msgstr ""

#~ msgid ""
#~ "To operate, Iroha requires a "
#~ "``PostgreSQL`` database. Let's start with "
#~ "creating a Docker network, so containers"
#~ " for Postgres and Iroha can run "
#~ "on the same virtual network and "
#~ "successfully communicate. In this guide "
#~ "we will call it ``iroha-network``, "
#~ "but you can use any name. In "
#~ "your terminal write following command:"
#~ msgstr ""

#~ msgid "Starting PostgreSQL Container"
#~ msgstr ""

#~ msgid ""
#~ "Now we need to run ``PostgreSQL`` "
#~ "in a container, attach it to the"
#~ " network you have created before, and"
#~ " expose ports for communication:"
#~ msgstr ""

#~ msgid ""
#~ "If you already have Postgres running "
#~ "on a host system on default port"
#~ " (5432), then you should pick another"
#~ " free port that will be occupied. "
#~ "For example, 5433: ``-p 5433:5432 \\``"
#~ msgstr ""

#~ msgid "Creating Blockstore"
#~ msgstr ""

#~ msgid ""
#~ "Before we run Iroha container, we "
#~ "should create persistent volume to store"
#~ " files, storing blocks for the chain."
#~ " It is done via the following "
#~ "command:"
#~ msgstr ""

#~ msgid "Configuring Iroha Network"
#~ msgstr ""

#~ msgid ""
#~ "To keep things simple, in this "
#~ "guide we will create a network "
#~ "containing only one node. To understand"
#~ " how to run several peers, follow "
#~ "this guide."
#~ msgstr ""

#~ msgid ""
#~ "Now we need to configure our Iroha"
#~ " network. This includes creating a "
#~ "configuration file, generating keypairs for"
#~ " a users, writing a list of "
#~ "peers and creating a genesis block. "
#~ "However, we have prepared an example "
#~ "configuration for this guide, so you "
#~ "can start playing with Iroha faster. "
#~ "In order to get those files, you"
#~ " need to clone the `Iroha repository"
#~ " <github.com/hyperledger/iroha>`_ from Github."
#~ msgstr ""

#~ msgid ""
#~ "``--depth-1`` option allows us to "
#~ "download only latest commit and save "
#~ "some time and bandwidth. If you "
#~ "want to get a full commit history,"
#~ " you can omit this option."
#~ msgstr ""

#~ msgid "Starting Iroha Container"
#~ msgstr ""

#~ msgid ""
#~ "We are ready to launch our Iroha"
#~ " container. Let's do it with the "
#~ "following command"
#~ msgstr ""

#~ msgid "Let's look in detail what this command does:"
#~ msgstr "Regardons en détail ce que fait cette commande: "

#~ msgid ""
#~ "``docker run -it --name iroha \\`` "
#~ "attaches you to docker container called"
#~ " ``iroha``"
#~ msgstr ""

#~ msgid ""
#~ "with ``$(pwd)/iroha/example:/opt/iroha_data \\`` we"
#~ " add a folder containing our prepared"
#~ " configuration to a docker container "
#~ "into ``/opt/iroha_data``."
#~ msgstr ""

#~ msgid ""
#~ "``-v blockstore:/tmp/block_store \\`` adds a"
#~ " persistent block storage which we "
#~ "created before to a container, so "
#~ "our blocks won't be lost after we"
#~ " stop the container"
#~ msgstr ""

#~ msgid ""
#~ "``--network=iroha-network \\`` adds our "
#~ "container to previously created ``iroha-"
#~ "network``, so Iroha and Postgres could"
#~ " see each other."
#~ msgstr ""

#~ msgid ""
#~ "``--entrypoint=/bin/bash \\`` Because ``hyperledger"
#~ "/iroha-docker`` has the custom script "
#~ "which runs after starting the container,"
#~ " we want to override it so we"
#~ " can start Iroha Daemon manually."
#~ msgstr ""

#~ msgid ""
#~ "``hyperledger/iroha-docker:develop`` is the "
#~ "image which has the ``develop`` branch."
#~ msgstr ""

#~ msgid "Launching Iroha Daemon"
#~ msgstr ""

#~ msgid ""
#~ "Now you are in the interactive "
#~ "shell of Iroha's container. To actually"
#~ " run Iroha, we need to launch "
#~ "Iroha daemon – ``irohad``."
#~ msgstr ""

#~ msgid ""
#~ "In the usual situation, you need "
#~ "to provide a config file, generate "
#~ "genesis block and keypair. However, as"
#~ " a part of this guide, we "
#~ "provide an example configuration for "
#~ "you. Please do not use these "
#~ "settings in a production. You can "
#~ "read more about configuration here."
#~ msgstr ""

#~ msgid ""
#~ "Congratulations! You have an Iroha node"
#~ " up and running! In the next "
#~ "section, we will test it by "
#~ "sending some transactions."
#~ msgstr ""

#~ msgid ""
#~ "You can get more information about "
#~ "``irohad`` and its launch options in "
#~ "this section"
#~ msgstr ""

#~ msgid "Interacting with Iroha Network"
#~ msgstr ""

#~ msgid ""
#~ "You can interact with Iroha using "
#~ "various ways. You can use our "
#~ "client libraries to write code in "
#~ "various programming languages (e.g. Java, "
#~ "Python, Javascript, Swift) which communicates"
#~ " with Iroha. Alternatively, you can "
#~ "use ``iroha-cli`` – our command-"
#~ "line tool for interacting with Iroha."
#~ " As a part of this guide, let's"
#~ " get familiar with ``iroha-cli``"
#~ msgstr ""

#~ msgid ""
#~ "Despite that ``iroha-cli`` is arguably"
#~ " the simplest way to start working"
#~ " with Iroha, ``iroha-cli`` was "
#~ "engineered very fast and lacks tests,"
#~ " so user experience might not be "
#~ "the best. For example, the order "
#~ "of menu items can differ from that"
#~ " you see in this guide. In the"
#~ " future, we will deliver a better "
#~ "version and appreciate contributions."
#~ msgstr ""

#~ msgid ""
#~ "Open a new terminal (note that "
#~ "Iroha container and ``irohad`` should be"
#~ " up and running) and attach to "
#~ "an ``iroha`` docker container:"
#~ msgstr ""

#~ msgid ""
#~ "Now you are in the interactive "
#~ "shell of Iroha's container again. We "
#~ "need to launch ``iroha-cli`` and "
#~ "pass an account name of the "
#~ "desired user. In our example, the "
#~ "account ``admin`` is already created in"
#~ " a ``test`` domain. Let's use this"
#~ " account to work with Iroha."
#~ msgstr ""

#~ msgid ""
#~ "Full account name has a ``@`` "
#~ "symbol between name and domain. Note "
#~ "that the keypair has the same "
#~ "name."
#~ msgstr ""

#~ msgid "Creating the First Transaction"
#~ msgstr ""

#~ msgid ""
#~ "You can see the interface of "
#~ "``iroha-cli`` now. Let's create a new"
#~ " asset, add some asset to the "
#~ "admin account and transfer it to "
#~ "other account. To achieve this, please"
#~ " choose option ``1. New transaction "
#~ "(tx)`` by writing ``tx`` or ``1`` "
#~ "to a console."
#~ msgstr ""

#~ msgid ""
#~ "Now you can see a list of "
#~ "available commands. Let's try creating a"
#~ " new asset. Select ``14. Create Asset"
#~ " (crt_ast)``. Now enter a name for"
#~ " your asset, for example ``coolcoin``. "
#~ "Next, enter a Domain ID. In our"
#~ " example we already have a domain "
#~ "``test``, so let's use it. Then we"
#~ " need to enter an asset precision "
#~ "– the amount of numbers in a "
#~ "fractional part. Let's set precision to"
#~ " ``2``."
#~ msgstr ""

#~ msgid ""
#~ "Congratulations, you have created your "
#~ "first command and added it to a"
#~ " transaction! You can either send it"
#~ " to Iroha or add some more "
#~ "commands ``1. Add one more command "
#~ "to the transaction (add)``. Let's add"
#~ " more commands, so we can do "
#~ "everything in one shot. Type ``add``."
#~ msgstr ""

#~ msgid ""
#~ "Now try adding some ``coolcoins`` to "
#~ "our account. Select ``16. Add Asset "
#~ "Quantity (add_ast_qty)``, enter Account ID "
#~ "– ``admin@test``, asset ID – "
#~ "``coolcoin#test``, integer part and precision."
#~ " For example, to add 200.50 "
#~ "``coolcoins``, we need to enter integer"
#~ " part as ``20050`` and precision as"
#~ " ``2``, so it becomes ``200.50``."
#~ msgstr ""

#~ msgid "Full asset name has a ``#`` symbol between name and domain."
#~ msgstr ""

#~ msgid ""
#~ "Let's transfer 100.50 ``coolcoins`` from "
#~ "``admin@test`` to ``test@test`` by adding "
#~ "one more command and choosing ``5. "
#~ "Transfer Assets (tran_ast)``. Enter Source "
#~ "Account and Destination Account, in our"
#~ " case ``admin@test`` and ``test@test``, "
#~ "Asset ID (``coolcoin#test``), integer part "
#~ "and precision (``10050`` and ``2`` "
#~ "accordingly)."
#~ msgstr ""

#~ msgid ""
#~ "Now we need to send our "
#~ "transaction to Iroha peer (``2. Send "
#~ "to Iroha peer (send)``). Enter peer "
#~ "address (in our case ``localhost``) and"
#~ " port (``50051``). Congratulations, your "
#~ "transaction is submitted and you can "
#~ "see your transaction hash. You can "
#~ "use it to check transaction's status."
#~ msgstr ""

#~ msgid ""
#~ "Go back to a terminal where "
#~ "``irohad`` is running. You can see "
#~ "logs of your transaction."
#~ msgstr ""

#~ msgid "Congratulations! You have submitted your first transaction to Iroha."
#~ msgstr ""

#~ msgid "Creating the First Query"
#~ msgstr ""

#~ msgid ""
#~ "Now let's check if ``coolcoins`` were"
#~ " successfully transferred from ``admin@test`` "
#~ "to ``test@test``. Choose ``2. New query"
#~ " (qry)``. ``7. Get Account's Assets "
#~ "(get_acc_ast)`` can help you to check"
#~ " if ``test@test`` now has ``coolcoin``. "
#~ "Form a query in a similar way "
#~ "you did with commands you did with"
#~ " commands and ``1. Send to Iroha "
#~ "peer (send)``. Now you can see "
#~ "information about how many ``coolcoin`` "
#~ "does ``test@test`` have. It will look"
#~ " similar to this:"
#~ msgstr ""

#~ msgid ""
#~ "Congratulations! You have submitted your "
#~ "first query to Iroha and got a "
#~ "response!"
#~ msgstr ""

#~ msgid ""
#~ "To get information about all available"
#~ " commands and queries please check "
#~ "our API section."
#~ msgstr ""

#~ msgid "Being Badass"
#~ msgstr ""

#~ msgid ""
#~ "Let's try being badass and cheat "
#~ "Iroha. For example, let's transfer more"
#~ " ``coolcoins`` than ``admin@test`` has. Try"
#~ " to transfer 100000.00 ``coolcoins`` from"
#~ " ``admin@test`` to ``test@test``. Again, "
#~ "proceed to ``1. New transaction (tx)``,"
#~ " ``5. Transfer Assets (tran_ast)``, enter"
#~ " Source Account and Destination Account,"
#~ " in our case ``admin@test`` and "
#~ "``test@test``, Asset ID (``coolcoin#test``), "
#~ "integer part and precision (``10000000`` "
#~ "and ``2`` accordingly). Send a "
#~ "transaction to Iroha peer as you "
#~ "did before. Well, it says"
#~ msgstr ""

#~ msgid ""
#~ "`Your transaction was accepted for "
#~ "processing`. Does it mean that we "
#~ "had successfully cheated Iroha? Let's "
#~ "try to see transaction's status. Choose"
#~ " ``3. New transaction status request "
#~ "(st)`` and enter transaction's hash "
#~ "which you can get in the console"
#~ " after the previous command. Let's "
#~ "send it to Iroha. It replies with:"
#~ msgstr ""

#~ msgid ""
#~ "Apparently no. Our transaction was not"
#~ " accepted because it did not pass "
#~ "stateful validation and ``coolcoins`` were "
#~ "not transferred. You can check the "
#~ "status of ``admin@test`` and ``test@test`` "
#~ "with queries to be sure (like we"
#~ " did earlier)."
#~ msgstr ""

#~ msgid "Deploying Iroha"
#~ msgstr ""

#~ msgid ""
#~ "Hyperledger Iroha can be deployed in "
#~ "different ways, depending on the "
#~ "perspective and the purpose. There can"
#~ " be either a single node deployed,"
#~ " or multiple nodes running in several"
#~ " containers on a local machine or "
#~ "spread across the network — so "
#~ "pick any case you need. This page"
#~ " describes different scenarios and is "
#~ "intended to act as a how-to "
#~ "guide for users, primarily trying out"
#~ " Iroha for the first time."
#~ msgstr ""

#~ msgid "Running single instance"
#~ msgstr ""

#~ msgid ""
#~ "Generally, people want to run Iroha "
#~ "locally in order to try out the"
#~ " API and explore the capabilities. "
#~ "This can be done in local or "
#~ "container environment (Docker). We will "
#~ "explore both possible cases, but in "
#~ "order to simplify peer components "
#~ "deployment, *it is advised to have "
#~ "Docker installed on your machine*."
#~ msgstr ""

#~ msgid "Local environment"
#~ msgstr ""

#~ msgid ""
#~ "By local environment, it is meant "
#~ "to have daemon process and Postgres "
#~ "deployed without any containers. This "
#~ "might be helpful in cases when "
#~ "messing up with Docker is not "
#~ "preferred — generally a quick "
#~ "exploration of the features."
#~ msgstr ""

#~ msgid "Run postgres server"
#~ msgstr ""

#~ msgid ""
#~ "In order to run postgres server "
#~ "locally, you should check postgres "
#~ "`website <https://www.postgresql.org/docs/current/static"
#~ "/server-start.html>`__ and follow their "
#~ "description. Generally, postgres server runs"
#~ " automatically when the system starts, "
#~ "but this should be checked in the"
#~ " configuration of the system."
#~ msgstr ""

#~ msgid "Run iroha daemon (irohad)"
#~ msgstr ""

#~ msgid ""
#~ "There is a list of preconditions "
#~ "which you should meet before proceeding:"
#~ msgstr ""

#~ msgid "Postgres server is up and running"
#~ msgstr ""

#~ msgid "`irohad` Iroha daemon binary is built and accessible in your system"
#~ msgstr ""

#~ msgid "The genesis block and configuration files were created"
#~ msgstr ""

#~ msgid "Config file uses valid postgres connection settings"
#~ msgstr ""

#~ msgid "A keypair for the peer is generated"
#~ msgstr ""

#~ msgid ""
#~ "This is the first time you run "
#~ "the Iroha on this peer and you "
#~ "want to create new chain"
#~ msgstr ""

#~ msgid ""
#~ "Have you got something that is not"
#~ " the same as in the list of "
#~ "assumptions? Please, refer to the "
#~ "section below the document, titled as"
#~ " `Dealing with troubles`_."
#~ msgstr ""

#~ msgid ""
#~ "In case of valid assumptions, the "
#~ "only thing that remains is to "
#~ "launch the daemon process with following"
#~ " parameters:"
#~ msgstr ""

#~ msgid "Parameter"
#~ msgstr "Paramètre"

#~ msgid "Meaning"
#~ msgstr ""

#~ msgid "config"
#~ msgstr ""

#~ msgid ""
#~ "configuration file, containing postgres "
#~ "connection and values to tune the "
#~ "system"
#~ msgstr ""

#~ msgid "genesis_block"
#~ msgstr ""

#~ msgid "initial block in the ledger"
#~ msgstr ""

#~ msgid "keypair_name"
#~ msgstr ""

#~ msgid ""
#~ "private and public key file names "
#~ "without file extension, used by peer "
#~ "to sign the blocks"
#~ msgstr ""

#~ msgid "An example of shell command, running Iroha daemon is"
#~ msgstr ""

#~ msgid ""
#~ "If you have stopped the daemon and"
#~ " want to use existing chain — "
#~ "you should not pass the genesis "
#~ "block parameter."
#~ msgstr ""

#~ msgid "Docker"
#~ msgstr ""

#~ msgid ""
#~ "In order to run Iroha peer as "
#~ "a single instance in Docker, you "
#~ "should pull the image for Iroha "
#~ "first:"
#~ msgstr ""

#~ msgid ""
#~ "Use *latest* tag for latest stable "
#~ "release, and *develop* for latest "
#~ "development version"
#~ msgstr ""

#~ msgid ""
#~ "Then, you have to create an "
#~ "enviroment for the image to run "
#~ "without problems:"
#~ msgstr ""

#~ msgid "Create docker network"
#~ msgstr ""

#~ msgid ""
#~ "Containers for Postgres and Iroha should"
#~ " run in the same virtual network, "
#~ "in order to be available to each"
#~ " other. Create a network, by typing"
#~ " following command (you can use any"
#~ " name for the network, but in "
#~ "the example, we use *iroha-network* "
#~ "name):"
#~ msgstr ""

#~ msgid "Run Postgresql in a container"
#~ msgstr ""

#~ msgid ""
#~ "Similarly, run postgres server, attaching "
#~ "it to the network you have created"
#~ " before, and exposing ports for "
#~ "communication:"
#~ msgstr ""

#~ msgid "Create volume for block storage"
#~ msgstr ""

#~ msgid ""
#~ "Before we run iroha daemon in the"
#~ " container, we should create persistent "
#~ "volume to store files, storing blocks"
#~ " for the chain. It is done via"
#~ " the following command:"
#~ msgstr ""

#~ msgid "Running iroha daemon in docker container"
#~ msgstr ""

#~ msgid ""
#~ "There is a list of assumptions "
#~ "which you should review before "
#~ "proceeding:"
#~ msgstr ""

#~ msgid "Postgres server is running on the same docker network"
#~ msgstr ""

#~ msgid "There is a folder, containing config file and keypair for a single node"
#~ msgstr ""

#~ msgid "If they are met, you can move forward with the following command:"
#~ msgstr ""

#~ msgid "Running multiple instances (peer network)"
#~ msgstr ""

#~ msgid ""
#~ "In order to set up a peer "
#~ "network, one should follow routines, "
#~ "described in this section. In this "
#~ "version, we support manual deployment "
#~ "and automated by Ansible Playbook. "
#~ "Choose an option, that meets your "
#~ "security criteria and other needs."
#~ msgstr ""

#~ msgid "Manually"
#~ msgstr "Manuellement"

#~ msgid ""
#~ "By manual deployment, we mean that "
#~ "Iroha peer network is set up "
#~ "without automated assistance. It is "
#~ "similar to the process of running "
#~ "a single local instance, although the"
#~ " difference is the genesis block "
#~ "includes more than a single peer. "
#~ "In order to form a block, which"
#~ " includes more than a single peer,"
#~ " or requires customization for your "
#~ "needs, please take a look at "
#~ "`Dealing with troubles`_ section."
#~ msgstr ""

#~ msgid "Automated"
#~ msgstr "Automatisé"

#~ msgid ""
#~ "Anyone can reuse existing Ansible "
#~ "Playbook in order to create a "
#~ "network of peers running Iroha. "
#~ "Currently, this is a solution for "
#~ "development and testing, in other words,"
#~ " a proof of concept, and cannot "
#~ "be used in production environment, due"
#~ " to some security flaws. For "
#~ "production network, a manual composing "
#~ "of genesis block is required."
#~ msgstr ""

#~ msgid "One ore more <virtual> machines with a Linux distributive installed."
#~ msgstr ""

#~ msgid "SSH access to those machines"
#~ msgstr ""

#~ msgid "Ansible installed on a local machine"
#~ msgstr ""

#~ msgid "Step-by-step guide"
#~ msgstr ""

#~ msgid "Create peers.list file in $IROHA_HOME/deploy/ansible/data"
#~ msgstr ""

#~ msgid ""
#~ "Write all peers IP addresses followed"
#~ " by the internal port 10001 (e.g "
#~ "31.192.120.36:10001)"
#~ msgstr ""

#~ msgid "Open $IROHA_HOME/deploy/ansible/hosts file"
#~ msgstr ""

#~ msgid "Write all IP addresses in [hosts] group"
#~ msgstr ""

#~ msgid "Open terminal"
#~ msgstr "Ouvrez un terminal"

#~ msgid ""
#~ "Disable host key checking, because it"
#~ " can cause troubles due to "
#~ "interactive prompt"
#~ msgstr ""

#~ msgid "Go to ansible folder"
#~ msgstr "Allez dans le dossier ansible"

#~ msgid "Run playbook, providing your private key and hosts file"
#~ msgstr ""

#~ msgid "Wait until playbook finishes and then Iroha network is ready and up."
#~ msgstr ""

#~ msgid "Checking Iroha peer status"
#~ msgstr ""

#~ msgid "SSH into any of your machines"
#~ msgstr ""

#~ msgid "Check Iroha container logs:"
#~ msgstr ""

#~ msgid "Dealing with troubles"
#~ msgstr ""

#~ msgid "—\"Please, help me, because I am…\""
#~ msgstr ""

#~ msgid "Not having Iroha daemon binary"
#~ msgstr ""

#~ msgid ""
#~ "You can build Iroha daemon binary "
#~ "from sources, following API section from"
#~ " the `website <https://hyperledger.github.io/iroha-"
#~ "api/#build>`__"
#~ msgstr ""

#~ msgid "Not having config file"
#~ msgstr ""

#~ msgid ""
#~ "Check how to create a configuration "
#~ "file by following this `link "
#~ "<https://hyperledger.github.io/iroha-api/#prepare-"
#~ "configuration-file>`__"
#~ msgstr ""

#~ msgid "Not having genesis block"
#~ msgstr ""

#~ msgid ""
#~ "Create genesis block by generating it"
#~ " via `iroha-cli` or manually, as "
#~ "it is described `here "
#~ "<https://hyperledger.github.io/iroha-api/#create-"
#~ "genesis-block>`__"
#~ msgstr ""

#~ msgid "Not having a keypair for a peer"
#~ msgstr ""

#~ msgid ""
#~ "In order to create a keypair for"
#~ " an account or a peer, use "
#~ "iroha-cli binary by passing the name"
#~ " of the peer with `--new_account` "
#~ "option."
#~ msgstr ""

#~ msgid "Guides and how-tos"
#~ msgstr ""

#~ msgid ""
#~ "Here we will take a look more "
#~ "closely at how to use Iroha. In"
#~ " essence, this section is a "
#~ "collection of how-tos for different "
#~ "scenarios: - how to install Iroha "
#~ "- what is required to build client"
#~ " libraries and how to use them "
#~ "(for example https://developers.google.com/protocol-"
#~ "buffers/docs/javatutorial) - how to use "
#~ "CLI - how to deploy a network "
#~ "of Iroha peers, etc."
#~ msgstr ""

#~ msgid "Client libraries"
#~ msgstr ""

#~ msgid "C++ library"
#~ msgstr ""

#~ msgid "Where to get"
#~ msgstr ""

#~ msgid "How to use/import"
#~ msgstr ""

#~ msgid "Example code"
#~ msgstr ""

#~ msgid "Troubleshooting"
#~ msgstr ""

#~ msgid "Troubleshoting"
#~ msgstr ""

#~ msgid "Maintenance"
#~ msgstr ""

#~ msgid ""
#~ "Hardware requirements, deployment process in"
#~ " details, aspects related to security, "
#~ "configuration files — all of the "
#~ "listed is explained in this separate "
#~ "section, helpful for DevOps engineers or"
#~ " those who are digging deeper in "
#~ "the system capabilities."
#~ msgstr ""

#~ msgid "Ansible"
#~ msgstr ""

#~ msgid "Use Case Scenarios"
#~ msgstr ""

#~ msgid ""
#~ "We list a number of use cases "
#~ "and specific advantages that Hyperledger "
#~ "Iroha can introduce to these "
#~ "applications. We hope that the "
#~ "applications and use cases will inspire"
#~ " developers and creators to further "
#~ "innovation with Hyperledger Iroha."
#~ msgstr ""

#~ msgid "Certificates in Education, Healthcare"
#~ msgstr ""

#~ msgid ""
#~ "Hyperledger Iroha incorporates into the "
#~ "system multiple certifying authorities such"
#~ " as universities, schools, and medical "
#~ "institutions. Flexible permission model used"
#~ " in Hyperledger Iroha allows building "
#~ "certifying identities, and grant certificates."
#~ " The storage of explicit and implicit"
#~ " information in users' account allows "
#~ "building various reputation and identity "
#~ "systems."
#~ msgstr ""

#~ msgid ""
#~ "By using Hyperledger Iroha each "
#~ "education or medical certificate can be"
#~ " verified that it was issued by "
#~ "certain certifying authorities. Immutability "
#~ "and clear validation rules provide "
#~ "transparency to health and education "
#~ "significantly reducing the usage of fake"
#~ " certificates."
#~ msgstr ""

#~ msgid "Example"
#~ msgstr ""

#~ msgid ""
#~ "Imagine a medical institution registered "
#~ "as a ``hospital`` domain in Hyperledger"
#~ " Iroha. This domain has certified and"
#~ " registered workers each having some "
#~ "role, e.g. ``physician``, ``therapist``, "
#~ "``nurse``. Each patient of the hospital"
#~ " has an account with full medical "
#~ "history. Each medical record, like blood"
#~ " test results, is securely and "
#~ "privately stored in the account of "
#~ "the patient as JSON key/values. Rules"
#~ " in ``hospital`` domain are defined "
#~ "such that only certified medical workers"
#~ " and the user can access the "
#~ "personal information. The medical data "
#~ "returned by a query is verified "
#~ "that it comes from a trusted "
#~ "source."
#~ msgstr ""

#~ msgid ""
#~ "Hospital is tied to a specific "
#~ "location, following legal rules of that"
#~ " location, like storing personal data "
#~ "of citizens only in specific "
#~ "regions(`privacy rules`_). A multi-domain "
#~ "approach in Hyperledger Iroha allows "
#~ "sharing information across multiple countries"
#~ " not violating legal rules. For "
#~ "example, if the user ``makoto@hospital`` "
#~ "decides to share personal case history"
#~ " with a medical institution in "
#~ "another country, the user can use "
#~ "``grant`` command with permission "
#~ "``can_get_my_acc_detail``."
#~ msgstr ""

#~ msgid ""
#~ "Similar to a medical institution, a "
#~ "registered university in Hyperledger Iroha "
#~ "has permissions to push information to"
#~ " the graduated students. A diploma or"
#~ " certificate is essentially Proof-of-"
#~ "Graduation with a signature of "
#~ "recognized University. This approach helps "
#~ "to ease hiring process, with an "
#~ "employer making a query to Hyperledger"
#~ " Iroha to get the acquired skills "
#~ "and competence of the potential "
#~ "employee."
#~ msgstr ""

#~ msgid "Cross-Border Asset Transfers"
#~ msgstr ""

#~ msgid ""
#~ "Hyperledger Iroha provides fast and "
#~ "clear trade and settlement rules using"
#~ " multi-signature accounts and atomic "
#~ "exchange. Asset management is easy as"
#~ " in centralized systems while providing "
#~ "necessary security guarantees. By simplifying"
#~ " the rules and commands required to"
#~ " create and transfer assets, we lower"
#~ " the barrier to entry, while at "
#~ "the same time maintaining high-security"
#~ " guarantees."
#~ msgstr ""

#~ msgid ""
#~ "For example [#f1]_, a user might "
#~ "want to transfer the ownership of "
#~ "a car. User ``haruto`` has registered"
#~ " owner-asset relationship with a car"
#~ " of ``sora`` brand with parameters: "
#~ "``{\"id\": \"34322069732074686520616E73776572\", "
#~ "\"color\": \"red\", \"size\": \"small\"}``. "
#~ "This ownership is fixed in an "
#~ "underlying database of the system with"
#~ " copies at each validating peer. To"
#~ " perform the transfer operation user "
#~ "``haruto`` creates an offer, i.e. a "
#~ "multi-signature transaction with two "
#~ "commands: ``transfer`` to user ``haru`` "
#~ "the car identifier and ``transfer`` some"
#~ " amount of ``usd`` tokens from "
#~ "``haru`` to ``haruto``. Upon receiving "
#~ "the offer ``haru`` accepts it by "
#~ "signing the multi-signature transaction, "
#~ "in this case, transaction atomically "
#~ "commits to the system."
#~ msgstr ""

#~ msgid ""
#~ "Hypeledger Iroha has no built-in "
#~ "token, but it supports different assets"
#~ " from various creators. This approach "
#~ "allows building a decentralized exchange "
#~ "market. For example, the system can "
#~ "have central banks from different "
#~ "countries to issue assets."
#~ msgstr ""

#~ msgid "Currently not implemented"
#~ msgstr ""

#~ msgid "Financial Applications"
#~ msgstr ""

#~ msgid ""
#~ "Hyperleger Iroha can be very useful "
#~ "in the auditing process. Each "
#~ "information is validated by business "
#~ "rules and is constantly maintained by"
#~ " distinct network participants. Access "
#~ "control rules along with some encryption"
#~ " maintain desired level of privacy. "
#~ "Access control rules can be defined "
#~ "at different levels: user-level, "
#~ "domain-level or system-level. At the"
#~ " user-level privacy rules for a "
#~ "specific individual are defined. If "
#~ "access rules are determined at domain"
#~ " or system level, they are affecting"
#~ " all users in the domain. In "
#~ "Hyperledger Iroha we provide convenient "
#~ "role-based access control rules, where "
#~ "each role has specific permissions."
#~ msgstr ""

#~ msgid ""
#~ "Transactions can be traced with a "
#~ "local database. Using Iroha-API auditor"
#~ " can query and perform analytics on"
#~ " the data, execute specific audit "
#~ "software. Hyperledger Iroha supports different"
#~ " scenarios for deploying analytics "
#~ "software:  on a local computer, or "
#~ "execute code on specific middleware. "
#~ "This approach allows analyzing Big Data"
#~ " application with Hadoop, Apache, and "
#~ "others. Hypeledger Iroha serves as a "
#~ "guarantor of data integrity and privacy"
#~ " (due to the query permissions "
#~ "restriction)."
#~ msgstr ""

#~ msgid ""
#~ "For example, auditing can be helpful "
#~ "in financial applications. An auditor "
#~ "account has a role of the "
#~ "``auditor`` with permissions to access "
#~ "the information of users in the "
#~ "domain without bothering the user. To"
#~ " reduce the probability of account "
#~ "hijacking and prevent the auditor from"
#~ " sending malicious queries, the auditor "
#~ "is typically defined as a multi-"
#~ "signature account, meaning that auditor "
#~ "can make queries only having signatures"
#~ " from multiple separate identities. The "
#~ "auditor can make queries not only "
#~ "to fetch account data and balance "
#~ "but also all transactions of a "
#~ "user, e.g. all transfers of user "
#~ "``haruto`` in domain ``konoha``. To "
#~ "efficiently analyze data of million "
#~ "users each Iroha node can work in"
#~ " tandem with analytics software."
#~ msgstr ""

#~ msgid ""
#~ "Multi-signature transactions are a "
#~ "powerful tool of Hyperledger Iroha that"
#~ " can disrupt tax system. Each "
#~ "transaction in a certain domain can "
#~ "be as a multi-signature transaction, "
#~ "where one signature comes from the "
#~ "user (for example asset transfer) and"
#~ " the second signature comes from "
#~ "special taxing nodes. Taxing nodes will"
#~ " have special validation rules written "
#~ "using Iroha-API, e.g. each purchase "
#~ "in the certified stores must pay "
#~ "taxes. In other words, Iroha a "
#~ "valid purchase transaction must contain "
#~ "two commands: money transfer(purchase) to "
#~ "the store and money transfer(tax "
#~ "payment) to the government."
#~ msgstr ""

#~ msgid "Identity Management"
#~ msgstr ""

#~ msgid ""
#~ "Hyperledger Iroha has an intrinsic "
#~ "support for identity management. Each "
#~ "user in the system has a uniquely"
#~ " identified account with personal "
#~ "information, and each transaction is "
#~ "signed and associated with a certain "
#~ "user. This makes Hyperledger Iroha "
#~ "perfect for various application with KYC"
#~ " (Know Your Customer) features."
#~ msgstr ""

#~ msgid ""
#~ "For example, insurance companies can "
#~ "benefit from querying the information of"
#~ " user’s transaction without worrying about"
#~ " the information truthfulness. Users can"
#~ " also benefit from storing personal "
#~ "information on a blockchain since "
#~ "authenticated information will reduce the "
#~ "time of claims processing. Imagine a "
#~ "situation where a user wants to "
#~ "make a hard money loan. Currently, "
#~ "pre-qualification is a tedious process"
#~ " of gathering information about income, "
#~ "debts and information verification. Each "
#~ "user in Hyperledger Iroha has an "
#~ "account with verified personal information,"
#~ " such as owning assets, job "
#~ "positions, and debts. User income and"
#~ " debts can be traced using query "
#~ "``GetAccountTransactions``, owning assets using "
#~ "query ``GetAccountAssets`` and job positions"
#~ " using ``GetAccountDetail``. Each query "
#~ "returns verified result reducing the "
#~ "processing time of hard money loan "
#~ "will take only a few seconds. To"
#~ " incentivize users to share personal "
#~ "information, various companies can come "
#~ "up with business processes. For example,"
#~ " insurance companies can create bonus "
#~ "discounts for users making fitness "
#~ "activities. Fitness applications can push "
#~ "private Proof-of-Activity to the "
#~ "system, and the user can decide "
#~ "later to share information with "
#~ "insurance companies using ``GrantPermission`` "
#~ "with permission ``can_get_my_acc_detail``."
#~ msgstr ""

#~ msgid "Supply Chain"
#~ msgstr ""

#~ msgid ""
#~ "Governance of a decentralized system and"
#~ " representing legal rules as a "
#~ "system's code is an essential "
#~ "combination of any supply chain system."
#~ " Certification system used in Hyperledger"
#~ " Iroha allows tokenization of physical "
#~ "items and embedding them into the "
#~ "system. Each item comes with the "
#~ "information about “what, when, where and"
#~ " why”."
#~ msgstr ""

#~ msgid ""
#~ "Permission systems and restricted set of"
#~ " secure core commands narrows the "
#~ "attack vector and provides effortlessly "
#~ "a basic level of privacy. Each "
#~ "transaction is traceable within a system"
#~ " with a hash value, by the "
#~ "credentials or certificates of the "
#~ "creator."
#~ msgstr ""

#~ msgid ""
#~ "Food supply chain is a shared "
#~ "system with multiple different actors, "
#~ "such as farmers, storehouses, grocery "
#~ "stores, and customers. The goal is "
#~ "to deliver food from a farmer's "
#~ "field to the table of a customer."
#~ " The product goes through many "
#~ "stages, with each stage recorded in "
#~ "shared space. A customer scans a "
#~ "code of the product via a mobile"
#~ " device, in which an Iroha query "
#~ "is encoded. Iroha query provides a "
#~ "full history with all stages, "
#~ "information about the product and the"
#~ " farmer."
#~ msgstr ""

#~ msgid ""
#~ "For example, ``gangreen`` is a "
#~ "registered farmer ``tomato`` asset creator,"
#~ " he serves as a guarantor tokenizing"
#~ " physical items, i.e. associating each "
#~ "tomato with an Iroha ``tomato`` item."
#~ " Asset creation and distribution processes"
#~ " are totally transparent for network "
#~ "participants. Iroha ``tomato`` goes on a"
#~ " journey through a multitude of "
#~ "vendors to finally come to user "
#~ "``chad``."
#~ msgstr ""

#~ msgid ""
#~ "We simplified asset creation to just "
#~ "a single command ``CreateAsset`` without "
#~ "the need to create complex smart "
#~ "contracts. One the major advantages of"
#~ " Hyperledger Iroha is in its ease,"
#~ " that allows developers to focus on"
#~ " the provided value of their "
#~ "applications."
#~ msgstr ""

#~ msgid "Related Research"
#~ msgstr ""

#~ msgid ""
#~ "(The idea was to show current "
#~ "pioneers of blockchain applications and "
#~ "their works.)"
#~ msgstr ""

#~ msgid "Hyperledger Iroha documentation"
#~ msgstr ""

#~ msgid "Last Reviewed"
#~ msgstr ""

#~ msgid "2018-03-06"
#~ msgstr ""

#~ msgid ""
#~ "Welcome! Hyperledger Iroha is a simple"
#~ " blockchain platform you can use to"
#~ " make trusted, secure, and fast "
#~ "applications by bringing the power of"
#~ " permission-based blockchain with Byzantine"
#~ " fault-tolerant consensus. It's free, "
#~ "open-source, and works on Linux "
#~ "and Mac OS, with a variety of "
#~ "mobile and desktop libraries."
#~ msgstr ""

#~ msgid ""
#~ "You can download the source code "
#~ "of Hyperledger Iroha and latest releases"
#~ " from `GitHub page "
#~ "<https://github.com/hyperledger/iroha>`_."
#~ msgstr ""

#~ msgid ""
#~ "This documentation will guide you "
#~ "through the installation, deployment, and "
#~ "launch of Iroha network, and explain "
#~ "to you how to write an application"
#~ " for it. We will also see which"
#~ " use case scenarios are feasible now,"
#~ " and are going to be implemented "
#~ "in the future."
#~ msgstr ""

#~ msgid ""
#~ "As Hyperledger Iroha is an open-"
#~ "source project, we will also cover "
#~ "contribution part and explain you a "
#~ "working process."
#~ msgstr ""

#~ msgid ""
#~ "There is a separate website for "
#~ "all external API documentation, which is"
#~ " `Iroha API <https://hyperledger.github.io/iroha-"
#~ "api>`_. We are in the process of"
#~ " migration, so that in future only"
#~ " RTD is maintained and updated."
#~ msgstr ""

#~ msgid "Overview of Iroha"
#~ msgstr ""

#~ msgid "What are the key features of Iroha?"
#~ msgstr ""

#~ msgid "Where Iroha can be used?"
#~ msgstr ""

#~ msgid "How is it different from Bitcoin or Ethereum?"
#~ msgstr ""

#~ msgid ""
#~ "How is it different from the rest"
#~ " of Hyperledger frameworks or other "
#~ "permissioned blockchains?"
#~ msgstr ""

#~ msgid "Is it fast?"
#~ msgstr ""

#~ msgid "How to create applications around Iroha?"
#~ msgstr ""

#~ msgid ""
#~ "A command changes the state, called "
#~ "World State View, by performing an "
#~ "action over an entity (asset, account)"
#~ " in the system. Any command should"
#~ " be included in a transaction to "
#~ "perform an action."
#~ msgstr ""

#~ msgid "Purpose"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of add asset quantity "
#~ "command is to increase the quantity "
#~ "of an asset on account of "
#~ "transaction creator. Use case scenario "
#~ "is to increase the number of a "
#~ "mutable asset in the system, which "
#~ "can act as a claim on a "
#~ "commodity (e.g. money, gold, etc.)"
#~ msgstr ""

#~ msgid "Schema"
#~ msgstr ""

#~ msgid "Structure"
#~ msgstr ""

#~ msgid "Field"
#~ msgstr ""

#~ msgid "Constraint"
#~ msgstr ""

#~ msgid "Account ID"
#~ msgstr ""

#~ msgid "account id in which to add asset"
#~ msgstr ""

#~ msgid "<account_name>@<domain_id>"
#~ msgstr ""

#~ msgid "alex@morgan"
#~ msgstr ""

#~ msgid "Asset ID"
#~ msgstr ""

#~ msgid "id of the asset"
#~ msgstr ""

#~ msgid "<asset_name>#<domain_id>"
#~ msgstr ""

#~ msgid "usd#morgan"
#~ msgstr ""

#~ msgid "Amount"
#~ msgstr ""

#~ msgid "positive amount of the asset to add"
#~ msgstr ""

#~ msgid "> 0"
#~ msgstr ""

#~ msgid "200.02"
#~ msgstr ""

#~ msgid "Asset and account should exist"
#~ msgstr ""

#~ msgid "Added quantity precision should be equal to asset precision"
#~ msgstr ""

#~ msgid ""
#~ "Creator of a transaction should have "
#~ "a role which has permissions for "
#~ "issuing assets"
#~ msgstr ""

#~ msgid "Creator of a transaction adds account quantity to his/her account only"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of add peer command is"
#~ " to write into ledger the fact "
#~ "of peer addition into the peer "
#~ "network. After a transaction with "
#~ "AddPeer has been committed, consensus "
#~ "and synchronization components will start "
#~ "using it."
#~ msgstr ""

#~ msgid "Address"
#~ msgstr ""

#~ msgid "resolvable address in network (IPv4, IPv6, domain name, etc.)"
#~ msgstr ""

#~ msgid "should be resolvable"
#~ msgstr ""

#~ msgid "192.168.1.1:50541"
#~ msgstr ""

#~ msgid "Peer key"
#~ msgstr ""

#~ msgid ""
#~ "peer public key, which is used in"
#~ " consensus algorithm to sign-off "
#~ "vote, commit, reject messages"
#~ msgstr ""

#~ msgid "ed25519 public key"
#~ msgstr ""

#~ msgid "292a8714694095edce6be799398ed5d6244cd7be37eb813106b217d850d261f2"
#~ msgstr ""

#~ msgid "Creator of the transaction has a role which has CanAddPeer permission"
#~ msgstr ""

#~ msgid "Such network address has not been already added"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of add signatory command "
#~ "is to add an identifier to the "
#~ "account. Such identifier is a public "
#~ "key of another device or a public"
#~ " key of another user."
#~ msgstr ""

#~ msgid "Account to which to add signatory"
#~ msgstr ""

#~ msgid "makoto@soramitsu"
#~ msgstr ""

#~ msgid "Public key"
#~ msgstr ""

#~ msgid "Signatory to add to account"
#~ msgstr ""

#~ msgid "359f925e4eeecfdd6aa1abc0b79a6a121a5dd63bb612b603247ea4f8ad160156"
#~ msgstr ""

#~ msgid "Two cases:"
#~ msgstr ""

#~ msgid ""
#~ "Case 1. Transaction creator wants to "
#~ "add a signatory to his or her "
#~ "account, having permission CanAddSignatory"
#~ msgstr ""

#~ msgid "Case 2. CanAddSignatory was granted to transaction creator"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of append role command "
#~ "is to promote an account to some"
#~ " created role in the system, where"
#~ " a role is a set of permissions"
#~ " account has to perform an action "
#~ "(command or query)."
#~ msgstr ""

#~ msgid "id or account to append role to"
#~ msgstr ""

#~ msgid "already existent"
#~ msgstr ""

#~ msgid "Role name"
#~ msgstr ""

#~ msgid "name of already created role"
#~ msgstr ""

#~ msgid "MoneyCreator"
#~ msgstr ""

#~ msgid "The role should exist in the system"
#~ msgstr ""

#~ msgid ""
#~ "Transaction creator should have permissions"
#~ " to append role (CanAppendRole)"
#~ msgstr ""

#~ msgid ""
#~ "Account, which appends role, has set "
#~ "of permissions in his roles that "
#~ "is a superset of appended role (in"
#~ " other words no-one can append "
#~ "role that is more powerful than "
#~ "what transaction creator is)"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of create account command"
#~ " is to make entity in the "
#~ "system, capable of sending transactions "
#~ "or queries, storing signatories, personal "
#~ "data and identifiers."
#~ msgstr ""

#~ msgid "Account name"
#~ msgstr ""

#~ msgid "domain-unique name for account"
#~ msgstr ""

#~ msgid "`[a-z_0-9]{1,32}`"
#~ msgstr ""

#~ msgid "morgan_stanley"
#~ msgstr ""

#~ msgid "Domain ID"
#~ msgstr ""

#~ msgid "target domain to make relation with"
#~ msgstr ""

#~ msgid "should be created before the account"
#~ msgstr ""

#~ msgid "america"
#~ msgstr ""

#~ msgid "Main pubkey"
#~ msgstr ""

#~ msgid "first public key to add to the account"
#~ msgstr ""

#~ msgid "407e57f50ca48969b08ba948171bb2435e035d82cec417e18e4a38f5fb113f83"
#~ msgstr ""

#~ msgid "Transaction creator has permission to create an account"
#~ msgstr ""

#~ msgid "Domain, passed as domain_id, has already been created in the system"
#~ msgstr ""

#~ msgid ""
#~ "Such public key has not been added"
#~ " before as first public key of "
#~ "account or added to a multi-"
#~ "signature account"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of сreate asset command "
#~ "is to create a new type of "
#~ "asset, unique in a domain. An "
#~ "asset is a countable representation of"
#~ " a commodity."
#~ msgstr ""

#~ msgid "Asset name"
#~ msgstr ""

#~ msgid "domain-unique name for asset"
#~ msgstr ""

#~ msgid "soracoin"
#~ msgstr ""

#~ msgid "RFC1035 [#f1]_, RFC1123 [#f2]_"
#~ msgstr ""

#~ msgid "japan"
#~ msgstr ""

#~ msgid "Precision"
#~ msgstr ""

#~ msgid "number of digits after comma/dot"
#~ msgstr ""

#~ msgid "0 <= precision <= uint32 max"
#~ msgstr ""

#~ msgid "Transaction creator has permission to create assets"
#~ msgstr ""

#~ msgid "Asset name is unique in domain"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of create domain command "
#~ "is to make new domain in Iroha "
#~ "network, which is a group of "
#~ "accounts."
#~ msgstr ""

#~ msgid "ID for created domain"
#~ msgstr ""

#~ msgid "unique, RFC1035 [#f1]_, RFC1123 [#f2]_"
#~ msgstr ""

#~ msgid "japan05"
#~ msgstr ""

#~ msgid "Default role"
#~ msgstr ""

#~ msgid "role for any created user in the domain"
#~ msgstr ""

#~ msgid "one of the existing roles"
#~ msgstr ""

#~ msgid "User"
#~ msgstr ""

#~ msgid "Domain ID is unique"
#~ msgstr ""

#~ msgid ""
#~ "Account, who sends this command in "
#~ "transaction, has role with permission to"
#~ " create domain"
#~ msgstr ""

#~ msgid ""
#~ "Role, which will be assigned to "
#~ "created user by default, exists in "
#~ "the system"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of create role command "
#~ "is to create a new role in "
#~ "the system from the set of "
#~ "permissions. Combining different permissions "
#~ "into roles, maintainers of Iroha peer"
#~ " network can create customized security "
#~ "model."
#~ msgstr ""

#~ msgid "name of role to create"
#~ msgstr ""

#~ msgid "Permissions"
#~ msgstr ""

#~ msgid "array of already existent permissions"
#~ msgstr ""

#~ msgid ""
#~ "set of passed permissions is fully "
#~ "included into set of existing "
#~ "permissions"
#~ msgstr ""

#~ msgid "{can_receive, can_transfer}"
#~ msgstr ""

#~ msgid ""
#~ "Set of passed permissions is fully "
#~ "included into set of existing "
#~ "permissions"
#~ msgstr ""

#~ msgid "Set of the permissions is not empty"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of detach role command "
#~ "is to detach a role from the "
#~ "set of roles of an account. By "
#~ "executing this command it is possible"
#~ " to decrease the number of possible"
#~ " actions in the system for the "
#~ "user."
#~ msgstr ""

#~ msgid "ID of account where role will be deleted"
#~ msgstr ""

#~ msgid "a detached role name"
#~ msgstr ""

#~ msgid "existing role"
#~ msgstr ""

#~ msgid "The role exists in the system"
#~ msgstr ""

#~ msgid "The account has such role"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of grant permission command"
#~ " is to give another account rights"
#~ " to perform actions on the account"
#~ " of transaction sender (give someone "
#~ "right to do something with my "
#~ "account)."
#~ msgstr ""

#~ msgid "id of account whom rights are granted"
#~ msgstr ""

#~ msgid "Permission name"
#~ msgstr ""

#~ msgid "name of granted permission"
#~ msgstr ""

#~ msgid "permission is defined"
#~ msgstr ""

#~ msgid "CanTransferAssets"
#~ msgstr ""

#~ msgid "Account exists"
#~ msgstr ""

#~ msgid "Transaction creator is allowed to grant this permission"
#~ msgstr ""

#~ msgid "Remove signatory"
#~ msgstr ""

#~ msgid ""
#~ "Purpose of remove signatory command is"
#~ " to remove a public key, associated"
#~ " with an identity, from an account"
#~ msgstr ""

#~ msgid "Signatory to delete"
#~ msgstr ""

#~ msgid ""
#~ "When signatory is deleted, we should "
#~ "check if invariant of **size(signatories) "
#~ ">= quorum** holds"
#~ msgstr ""

#~ msgid "Signatory should have been previously added to the account"
#~ msgstr ""

#~ msgid ""
#~ "Case 1. When transaction creator wants"
#~ " to remove signatory from their "
#~ "account and he or she has "
#~ "permission CanRemoveSignatory"
#~ msgstr ""

#~ msgid "Case 2. CanRemoveSignatory was granted to transaction creator"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of revoke permission command"
#~ " is to revoke or dismiss given "
#~ "granted permission from another account "
#~ "in the network."
#~ msgstr ""

#~ msgid "permission was granted"
#~ msgstr ""

#~ msgid ""
#~ "Transaction creator should have previously "
#~ "granted this permission to a target "
#~ "account"
#~ msgstr ""

#~ msgid ""
#~ "Purpose of set account detail command"
#~ " is to set key-value information "
#~ "for a given account"
#~ msgstr ""

#~ msgid "id of account whom key-value information was set"
#~ msgstr ""

#~ msgid "Key"
#~ msgstr ""

#~ msgid "key of information being set"
#~ msgstr ""

#~ msgid "`[A-Za-z0-9_]{1,64}`"
#~ msgstr ""

#~ msgid "Name"
#~ msgstr ""

#~ msgid "Value"
#~ msgstr ""

#~ msgid "value of corresponding key"
#~ msgstr ""

#~ msgid "≤ 4096"
#~ msgstr ""

#~ msgid "Makoto"
#~ msgstr ""

#~ msgid ""
#~ "Case 1. When transaction creator wants"
#~ " to set account detail to his/her "
#~ "account and he or she has "
#~ "permission CanSetAccountInfo"
#~ msgstr ""

#~ msgid "Case 2. CanSetAccountInfo was granted to transaction creator"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of set account quorum "
#~ "command is to set the number of"
#~ " signatories required to confirm the "
#~ "identity of a user, who creates "
#~ "the transaction. Use case scenario is"
#~ " to set the number of different "
#~ "users, utilizing single account, to sign"
#~ " off the transaction."
#~ msgstr ""

#~ msgid "ID of account to set quorum"
#~ msgstr ""

#~ msgid "Quorum"
#~ msgstr ""

#~ msgid ""
#~ "number of signatories needed to be "
#~ "included with a transaction from this"
#~ " account"
#~ msgstr ""

#~ msgid "0 < quorum ≤ public-key set up to account ≤ 128"
#~ msgstr ""

#~ msgid ""
#~ "When quorum is set, it is checked"
#~ " if invariant of **size(signatories) >= "
#~ "quorum** holds."
#~ msgstr ""

#~ msgid ""
#~ "Case 1. When transaction creator wants"
#~ " to set quorum for his/her account"
#~ " and he or she has permission "
#~ "CanRemoveSignatory"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of subtract asset quantity"
#~ " command is the opposite of "
#~ "AddAssetQuantity commands — to decrease "
#~ "the number of assets on account of"
#~ " transaction creator."
#~ msgstr ""

#~ msgid "account id from which to subtract asset"
#~ msgstr ""

#~ msgid "positive amount of the asset to subtract"
#~ msgstr ""

#~ msgid "200"
#~ msgstr ""

#~ msgid ""
#~ "Creator of the transaction should have"
#~ " a role which has permissions for "
#~ "subtraction of assets"
#~ msgstr ""

#~ msgid ""
#~ "Creator of transaction subtracts account "
#~ "quantity in his/her account only"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of transfer asset command"
#~ " is to share assets within the "
#~ "account in peer network: in the "
#~ "way that source account transfers assets"
#~ " to the target account."
#~ msgstr ""

#~ msgid "Source account ID"
#~ msgstr ""

#~ msgid "ID of account to withdraw asset from"
#~ msgstr ""

#~ msgid "Destination account ID"
#~ msgstr ""

#~ msgid "ID of account to send asset at"
#~ msgstr ""

#~ msgid "alex@california"
#~ msgstr ""

#~ msgid "ID of asset to transfer"
#~ msgstr ""

#~ msgid "usd#usa"
#~ msgstr ""

#~ msgid "Message to attach to transfer"
#~ msgstr ""

#~ msgid "Max length is 64"
#~ msgstr ""

#~ msgid "here's my money take it"
#~ msgstr ""

#~ msgid "amount of the asset to transfer"
#~ msgstr ""

#~ msgid "0 < amount < max_uint256"
#~ msgstr ""

#~ msgid "200.20"
#~ msgstr ""

#~ msgid "Source account has this asset in its AccountHasAsset relation [#f1]_"
#~ msgstr ""

#~ msgid ""
#~ "An amount is a positive number and"
#~ " asset precision is consistent with "
#~ "the asset definition"
#~ msgstr ""

#~ msgid "Source account has enough amount of asset to transfer and is not zero"
#~ msgstr ""

#~ msgid ""
#~ "Source account can transfer money, and"
#~ " destination account can receive money "
#~ "(their roles have these permissions)"
#~ msgstr ""

#~ msgid "https://www.ietf.org/rfc/rfc1035.txt"
#~ msgstr ""

#~ msgid "https://www.ietf.org/rfc/rfc1123.txt"
#~ msgstr ""

#~ msgid "Contents are missing for now."
#~ msgstr ""

#~ msgid ""
#~ "In API section we will take a "
#~ "look at building blocks of an "
#~ "application interacting with Iroha. We "
#~ "will overview commands and queries that"
#~ " the system has, and the set of"
#~ " client libraries encompassing transport "
#~ "and application layer logic."
#~ msgstr ""

#~ msgid ""
#~ "A query is a request related to"
#~ " certain part of World State View "
#~ "— the latest state of blockchain. "
#~ "Query cannot modify the contents of "
#~ "the chain and a response is "
#~ "returned to any client immediately after"
#~ " receiving peer has processed a "
#~ "query."
#~ msgstr ""

#~ msgid "The validation for all queries includes:"
#~ msgstr ""

#~ msgid ""
#~ "timestamp — shouldn't be from the "
#~ "past (24 hours prior to the peer"
#~ " time) or from the future (range "
#~ "of 5 minutes added to the peer "
#~ "time)"
#~ msgstr ""

#~ msgid ""
#~ "signature of query creator — used "
#~ "for checking the identity of query "
#~ "creator"
#~ msgstr ""

#~ msgid ""
#~ "query counter — checked to be "
#~ "incremented with every subsequent query "
#~ "from query creator"
#~ msgstr ""

#~ msgid ""
#~ "roles — depending on the query "
#~ "creator's role: the range of state "
#~ "available to query can relate to "
#~ "to the same account, account in "
#~ "the domain, to the whole chain, or"
#~ " not allowed at all"
#~ msgstr ""

#~ msgid "Get Account"
#~ msgstr ""

#~ msgid "Purpose of get account query is to get the state of an account."
#~ msgstr ""

#~ msgid "Request Schema"
#~ msgstr ""

#~ msgid "Request Structure"
#~ msgstr ""

#~ msgid "account id to request its state"
#~ msgstr ""

#~ msgid "Response Schema"
#~ msgstr ""

#~ msgid "Response Structure"
#~ msgstr ""

#~ msgid "account id"
#~ msgstr ""

#~ msgid "domain where the account was created"
#~ msgstr ""

#~ msgid "morgan"
#~ msgstr ""

#~ msgid "number of signatories needed to sign the transaction to make it valid"
#~ msgstr ""

#~ msgid "0 < quorum ≤ 128"
#~ msgstr ""

#~ msgid "JSON data"
#~ msgstr ""

#~ msgid "key-value account information"
#~ msgstr ""

#~ msgid "JSON"
#~ msgstr ""

#~ msgid "{ genesis: {name: alex} }"
#~ msgstr ""

#~ msgid "Get Signatories"
#~ msgstr ""

#~ msgid ""
#~ "Purpose of get signatories query is "
#~ "to get signatories, which act as "
#~ "an identity of the account."
#~ msgstr ""

#~ msgid "account id to request signatories"
#~ msgstr ""

#~ msgid "Keys"
#~ msgstr ""

#~ msgid "an array of public keys"
#~ msgstr ""

#~ msgid "`ed25519 <https://ed25519.cr.yp.to>`_"
#~ msgstr ""

#~ msgid "Get Transactions"
#~ msgstr ""

#~ msgid ""
#~ "GetTransactions is used for retrieving "
#~ "information about transactions, based on "
#~ "their hashes."
#~ msgstr ""

#~ msgid "Transactions hashes"
#~ msgstr ""

#~ msgid "an array of hashes"
#~ msgstr ""

#~ msgid "array with 32 byte hashes"
#~ msgstr ""

#~ msgid "{hash1, hash2…}"
#~ msgstr ""

#~ msgid "Transactions"
#~ msgstr ""

#~ msgid "an array of transactions"
#~ msgstr ""

#~ msgid "Committed transactions"
#~ msgstr ""

#~ msgid "{tx1, tx2…}"
#~ msgstr ""

#~ msgid "Get Account Transactions"
#~ msgstr ""

#~ msgid ""
#~ "In a case when a list of "
#~ "transactions per account is needed, "
#~ "`GetAccountTransactions` query can be formed."
#~ msgstr ""

#~ msgid "account id to request transactions from"
#~ msgstr ""

#~ msgid "an array of transactions for given account"
#~ msgstr ""

#~ msgid "Get Account Asset Transactions"
#~ msgstr ""

#~ msgid ""
#~ "`GetAccountAssetTransactions` query returns all "
#~ "transactions associated with given account "
#~ "and asset."
#~ msgstr ""

#~ msgid "asset id in order to filter transactions containing this asset"
#~ msgstr ""

#~ msgid "jpy#japan"
#~ msgstr ""

#~ msgid "an array of transactions for given account and asset"
#~ msgstr ""

#~ msgid "Get Account Assets"
#~ msgstr ""

#~ msgid ""
#~ "To get the state of an asset "
#~ "in an account (a balance), "
#~ "`GetAccountAssets` query can be used."
#~ msgstr ""

#~ msgid "account id to request balance from"
#~ msgstr ""

#~ msgid "asset id to know its balance"
#~ msgstr ""

#~ msgid "identifier of asset used for checking the balance"
#~ msgstr ""

#~ msgid "account which has this balance"
#~ msgstr ""

#~ msgid "Balance"
#~ msgstr ""

#~ msgid "balance of the asset"
#~ msgstr ""

#~ msgid "Not less than 0"
#~ msgstr ""

#~ msgid "Get Asset Info"
#~ msgstr ""

#~ msgid ""
#~ "In order to know precision for "
#~ "given asset, and other related info "
#~ "in the future, such as a "
#~ "description of the asset, etc. user "
#~ "can send `GetAssetInfo` query."
#~ msgstr ""

#~ msgid "asset id to know related information"
#~ msgstr ""

#~ msgid "jpy"
#~ msgstr ""

#~ msgid "domain related to this asset"
#~ msgstr ""

#~ msgid "number of digits after comma"
#~ msgstr ""

#~ msgid "0 < precision < 256"
#~ msgstr ""

#~ msgid "Get Roles"
#~ msgstr ""

#~ msgid ""
#~ "To get existing roles in the "
#~ "system, a user can send `GetRoles` "
#~ "query to Iroha network."
#~ msgstr ""

#~ msgid "Roles"
#~ msgstr ""

#~ msgid "array of created roles in the network"
#~ msgstr ""

#~ msgid "set of roles in the system"
#~ msgstr ""

#~ msgid "{MoneyCreator, User, Admin, …}"
#~ msgstr ""

#~ msgid "Get Role Permissions"
#~ msgstr ""

#~ msgid ""
#~ "To get available permissions per role"
#~ " in the system, a user can send"
#~ " `GetRolePermissions` query to Iroha "
#~ "network."
#~ msgstr ""

#~ msgid "Role ID"
#~ msgstr ""

#~ msgid "role to get permissions for"
#~ msgstr ""

#~ msgid "existing role in the system"
#~ msgstr ""

#~ msgid "array of permissions related to the role"
#~ msgstr ""

#~ msgid "string of permissions related to the role"
#~ msgstr ""

#~ msgid "{can_add_asset_qty, …}"
#~ msgstr ""

#~ msgid "Account"
#~ msgstr "Compte"

#~ msgid ""
#~ "An Iroha entity that is able to"
#~ " perform specified set of actions. "
#~ "Each account belongs to one of "
#~ "existing `domains <#domain>`__."
#~ msgstr ""

#~ msgid ""
#~ "An account has some number of "
#~ "`roles <#role>`__ (can be none) — "
#~ "which is a collection of permissions."
#~ " Only `grantable permissions <#grantable-"
#~ "permission>`__ are assigned to an "
#~ "account directly."
#~ msgstr ""

#~ msgid "Ametsuchi"
#~ msgstr ""

#~ msgid ""
#~ "Iroha storage component, which stores "
#~ "blocks and a state generated from "
#~ "blocks, called `World State View "
#~ "<#world-state-view>`__. There is no "
#~ "way for the `client <#client>`__ to "
#~ "directly interact with Ametsuchi."
#~ msgstr ""

#~ msgid "Asset"
#~ msgstr ""

#~ msgid ""
#~ "Any countable commodity or value. Each"
#~ " asset is related to one of "
#~ "existing `domains <#domain>`__. For example,"
#~ " an asset can represent any kind "
#~ "of such units - currency unit, a"
#~ " bar of gold, real estate unit, "
#~ "etc."
#~ msgstr ""

#~ msgid "Block"
#~ msgstr ""

#~ msgid ""
#~ "Transaction data is permanently recorded "
#~ "in files called blocks. Blocks are "
#~ "organized into a linear sequence over"
#~ " time (also known as the block "
#~ "chain) [#f1]_."
#~ msgstr ""

#~ msgid ""
#~ "Blocks are signed with the cryptographic"
#~ " signatures of Iroha `peers <#peer>`__, "
#~ "voting for this block during `consensus"
#~ " <#consensus>`__. Signable content is "
#~ "called payload, so the structure of "
#~ "a block looks like this:"
#~ msgstr ""

#~ msgid "*Outside payload*"
#~ msgstr ""

#~ msgid "hash — SHA3-512 hash of block protobuf payload"
#~ msgstr ""

#~ msgid ""
#~ "signatures — signatures of peers, which"
#~ " voted for the block during consensus"
#~ " round"
#~ msgstr ""

#~ msgid "*Inside payload*"
#~ msgstr ""

#~ msgid "height — a number of blocks in the chain up to the block"
#~ msgstr ""

#~ msgid "timestamp — Unix time (in milliseconds) of block forming by a peer"
#~ msgstr ""

#~ msgid ""
#~ "body — transactions, which successfully "
#~ "passed validation and consensus step"
#~ msgstr ""

#~ msgid "transactions quantity"
#~ msgstr ""

#~ msgid "previous hash of a block"
#~ msgstr ""

#~ msgid "Block Creator"
#~ msgstr ""

#~ msgid ""
#~ "System component that forms a block "
#~ "from a set of transactions that "
#~ "have been passed `stateless <#stateless-"
#~ "validation>`__ and `stateful <#stateful-"
#~ "validation>`__ validation for further "
#~ "propagation to `consensus <#consensus>`__."
#~ msgstr ""

#~ msgid "Client"
#~ msgstr ""

#~ msgid "Any application that uses Iroha is treated as a client."
#~ msgstr ""

#~ msgid ""
#~ "A distinctive feature of Iroha is "
#~ "that all clients are using simple "
#~ "client-server abstractions when they "
#~ "interact with a peer network: they "
#~ "don't use any abstractions which are "
#~ "specific for blockchain-related systems. "
#~ "For example, in Bitcoin clients have "
#~ "to validate blocks, or in Fabric "
#~ "they need to poll several peers to"
#~ " make sure that a transaction was "
#~ "written in a block, whereas in "
#~ "Iroha a client interacts with any "
#~ "peer similarly to a single server."
#~ msgstr ""

#~ msgid "Command"
#~ msgstr ""

#~ msgid ""
#~ "A command is an intention to "
#~ "change the `state <#world-state-"
#~ "view>`__. For example, in order to "
#~ "create a new `role <#role>`__ in "
#~ "Iroha you have to issue `Create "
#~ "role <../api/commands.html#create-role>`__ command."
#~ msgstr ""

#~ msgid "Consensus"
#~ msgstr ""

#~ msgid ""
#~ "A consensus algorithm is a process "
#~ "in computer science used to achieve "
#~ "agreement on a single data value "
#~ "among distributed processes or systems. "
#~ "Consensus algorithms are designed to "
#~ "achieve reliability in a network "
#~ "involving multiple unreliable nodes. Solving"
#~ " that issue -- known as the "
#~ "consensus problem -- is important in "
#~ "distributed computing and multi-agent "
#~ "systems."
#~ msgstr ""

#~ msgid "*Consensus, as an algorithm*"
#~ msgstr ""

#~ msgid ""
#~ "An algorithm to achieve agreement on "
#~ "a block among peers in the "
#~ "network. By having it in the "
#~ "system, reliability is increased."
#~ msgstr ""

#~ msgid "*Consensus, as a component*"
#~ msgstr ""

#~ msgid ""
#~ "Preserves consistent state among the "
#~ "`peers <#peer>`__ within a peer network."
#~ " Iroha uses own consensus algorithm "
#~ "called Yet Another Consensus (aka YAC)."
#~ " Distinctive features of this algorithm "
#~ "are its scalability, performance, and "
#~ "`Byzantine fault tolerance "
#~ "<https://en.wikipedia.org/wiki/Byzantine_fault_tolerance>`_. If"
#~ " there are missing blocks, they will"
#~ " be downloaded from another peer via"
#~ " `Synchronizer <#synchronizer>`__. Committed "
#~ "blocks are stored in `Ametsuchi "
#~ "<#ametsuchi>`__ block storage."
#~ msgstr ""

#~ msgid "Domain"
#~ msgstr ""

#~ msgid ""
#~ "A named abstraction for grouping "
#~ "`accounts <#account>`__ and `assets "
#~ "<#asset>`__."
#~ msgstr ""

#~ msgid "Ordering Gate"
#~ msgstr ""

#~ msgid ""
#~ "Internal Iroha component that passes "
#~ "`transactions <#transaction>`__ from `Peer "
#~ "Communication Service <#peer-communication-"
#~ "service>`__ to `Ordering Service "
#~ "<#ordering-service>`__. Ordering Gate eventually"
#~ " recieves `proposals <#proposal>`__ from "
#~ "Ordering Service and sends them to "
#~ "`Simulator <#simulator>`__ for `stateful "
#~ "validation <#stateful-validation>`__."
#~ msgstr ""

#~ msgid "Ordering Service"
#~ msgstr ""

#~ msgid ""
#~ "Internal Iroha component that combines "
#~ "several `transactions <#transaction>`__ that "
#~ "have been passed `stateless validation "
#~ "<#stateless-validation>`__ into a `proposal "
#~ "<#proposal>`__. Proposal creation could be "
#~ "triggered by one of the following "
#~ "events:"
#~ msgstr ""

#~ msgid "Time limit dedicated to transactions collection has expired."
#~ msgstr ""

#~ msgid ""
#~ "Ordering service has received the "
#~ "maximum amount of transactions allowed "
#~ "for a single proposal."
#~ msgstr ""

#~ msgid ""
#~ "Both parameters (timeout and maximum "
#~ "size of proposal) are configurable "
#~ "(check `environment-specific parameters "
#~ "<../guides/configuration.html#environment-specific-"
#~ "parameters>`_ page)."
#~ msgstr ""

#~ msgid ""
#~ "A common precondition for both triggers"
#~ " is that at least one transaction "
#~ "should reach ordering service. Otherwise, "
#~ "no proposal will be formed."
#~ msgstr ""

#~ msgid "Peer"
#~ msgstr ""

#~ msgid ""
#~ "A node that is a part of "
#~ "Iroha network. It participates in "
#~ "`consensus <#consensus>`_ process."
#~ msgstr ""

#~ msgid "Peer Communication Service"
#~ msgstr ""

#~ msgid ""
#~ "Internal component of Iroha - an "
#~ "intermediary that transmits `transaction "
#~ "<#transaction>`__ from `Torii <#torii>`__ to"
#~ " `Ordering Gate <#ordering-gate>`__. The"
#~ " main goal of PCS is to hide"
#~ " the complexity of interaction with "
#~ "consensus implementation."
#~ msgstr ""

#~ msgid "Permission"
#~ msgstr ""

#~ msgid ""
#~ "A named rule that gives the "
#~ "privilege to perform a command. "
#~ "Permission **cannot** be granted to an"
#~ " `account <#account>`__ directly, instead, "
#~ "an account has roles, which are "
#~ "the collection of permissions."
#~ msgstr ""

#~ msgid "Grantable Permission"
#~ msgstr ""

#~ msgid ""
#~ "Only grantable permission is given to"
#~ " an `account <#account>`__ directly. An "
#~ "account that holds grantable permission "
#~ "is allowed to perform some particular"
#~ " action on behalf of another account."
#~ " For example, if the account "
#~ "a@domain1 gives the account b@domain2 a"
#~ " permission that it can transfer "
#~ "assets — then  b@domain2 can transfer"
#~ " assets of a@domain1 to anyone."
#~ msgstr ""

#~ msgid "Proposal"
#~ msgstr ""

#~ msgid ""
#~ "A set of `transactions <#transaction>`__ "
#~ "that have passed only `stateless "
#~ "validation <#stateless-validation>`__."
#~ msgstr ""

#~ msgid "Verified Proposal"
#~ msgstr ""

#~ msgid ""
#~ "A set of transactions that have "
#~ "been passed `stateless <#stateless-"
#~ "validation>`__ and `stateful <#stateful-"
#~ "validation>`__ validation, but were not "
#~ "committed yet."
#~ msgstr ""

#~ msgid "Role"
#~ msgstr ""

#~ msgid "A named abstraction that holds a set of `permissions <#permission>`__."
#~ msgstr ""

#~ msgid "Simulator"
#~ msgstr ""

#~ msgid "See `Verified Proposal Creator <#verified-proposal-creator>`__."
#~ msgstr ""

#~ msgid ""
#~ "A request to Iroha that does "
#~ "**not** change the `state <#world-"
#~ "state-view>`__. By performing a query, "
#~ "a client can get request data from"
#~ " the state, for example a balance "
#~ "of his account, a history of "
#~ "transactions, etc."
#~ msgstr ""

#~ msgid "Synchronizer"
#~ msgstr ""

#~ msgid ""
#~ "Is a part of `consensus <#consensus>`__."
#~ " Adds missing blocks to `peers' "
#~ "<#peer>`__ chains (downloads them from "
#~ "other peers)."
#~ msgstr ""

#~ msgid "Torii"
#~ msgstr ""

#~ msgid ""
#~ "⛩. Entry point for `clients "
#~ "<#client>`__. Uses gRPC as a transport."
#~ " In order to interact with Iroha "
#~ "anyone can use gRPC endpoints, described"
#~ " in `Commands <../api/commands.html>`__ and "
#~ "`Queries <../api/queries.html>`__ sections, or "
#~ "use `client libraries <../guides/libraries.html>`__."
#~ msgstr ""

#~ msgid ""
#~ "An ordered set of `commands "
#~ "<#command>`__, which is applied to the"
#~ " ledger atomically. Any nonvalid command"
#~ " within a transaction leads to "
#~ "rejection of the whole transaction "
#~ "during the validation process."
#~ msgstr ""

#~ msgid "Validator"
#~ msgstr ""

#~ msgid "There are two kinds of validation - stateless and stateful."
#~ msgstr ""

#~ msgid "Stateless Validation"
#~ msgstr ""

#~ msgid ""
#~ "Performed in `Torii <#torii>`__. Checks "
#~ "if an object is well-formed, "
#~ "including the signatures."
#~ msgstr ""

#~ msgid "Stateful Validation"
#~ msgstr ""

#~ msgid ""
#~ "Performed in `Verified Proposal Creator "
#~ "<#verified-proposal-creator>`__. Validates "
#~ "against `World State View <#world-"
#~ "state-view>`__."
#~ msgstr ""

#~ msgid "Verified Proposal Creator"
#~ msgstr ""

#~ msgid ""
#~ "Internal Iroha component that performs "
#~ "`stateful validation <#stateful-validation>`_ "
#~ "of `transactions <#transaction>`__ contained "
#~ "in received `proposal <#proposal>`__. On "
#~ "the basis of transactions that have "
#~ "been passed stateful validation **verified "
#~ "proposal** will be created and passed"
#~ " to `Block Creator <#block-creator>`__. "
#~ "All the transactions that have not "
#~ "passed stateful validation will be "
#~ "dropped and not included in a "
#~ "verified proposal."
#~ msgstr ""

#~ msgid "World State View"
#~ msgstr ""

#~ msgid ""
#~ "WSV reflects the current state of "
#~ "the system, can be considered as a"
#~ " snapshot. For example, WSV holds "
#~ "information about an amount of `assets"
#~ " <#asset>`__ that an `account <#account>`__"
#~ " has at the moment but does not"
#~ " contain any info history of "
#~ "`transaction <#transaction>`__ flow."
#~ msgstr ""

#~ msgid "https://en.bitcoin.it/wiki/Block"
#~ msgstr ""

#~ msgid ""
#~ "Docs are constantly updated and this "
#~ "section is going to be improved. "
#~ "Check glossary page while contents are"
#~ " elaborated."
#~ msgstr ""

#~ msgid "Client Libraries"
#~ msgstr ""

#~ msgid ""
#~ "Contents are missing for now. Please "
#~ "check deploy/ansible folder and README.md "
#~ "file in it."
#~ msgstr ""

#~ msgid "2018-03-30"
#~ msgstr ""

#~ msgid "Simple deployment and maintenance"
#~ msgstr ""

#~ msgid "Variety of libraries for developers"
#~ msgstr ""

#~ msgid "Role-based access control"
#~ msgstr ""

#~ msgid "Modular design, driven by command–query separation principle"
#~ msgstr ""

#~ msgid "Assets and identity management"
#~ msgstr ""

#~ msgid "In our quality model, we focus on and continuously improve:"
#~ msgstr ""

#~ msgid "Reliability (fault tolerance, recoverability)"
#~ msgstr ""

#~ msgid ""
#~ "Performance Efficiency (in particular time-"
#~ "behavior and resource utilization)"
#~ msgstr ""

#~ msgid ""
#~ "Usability (learnability, user error "
#~ "protection, appropriateness recognisability)"
#~ msgstr ""

#~ msgid "Where can Iroha be used?"
#~ msgstr ""

#~ msgid ""
#~ "Hyperledger Iroha is a general purpose"
#~ " permissioned blockchain system that can"
#~ " be used to manage digital assets,"
#~ " identity, and serialized data. This "
#~ "can be useful for applications such "
#~ "as interbank settlement, central bank "
#~ "digital currencies, payment systems, national"
#~ " IDs, and logistics, among others."
#~ msgstr ""

#~ msgid ""
#~ "For a detailed description please check"
#~ " our `Use Case Scenarios section "
#~ "<http://iroha.readthedocs.io/en/latest/use_cases/>`_."
#~ msgstr ""

#~ msgid ""
#~ "Bitcoin and Ethereum are designed to "
#~ "be permissionless ledgers where anyone "
#~ "can join and access all the data."
#~ " They also have native cryptocurrencies "
#~ "that are required to interact with "
#~ "the systems."
#~ msgstr ""

#~ msgid ""
#~ "In Iroha, there is no native "
#~ "cryptocurrency. Instead, to meet the "
#~ "needs of enterprises, system interaction "
#~ "is permissioned, meaning that only "
#~ "people with requisite access can "
#~ "interact with the system. Additionally, "
#~ "queries are also permissioned, such that"
#~ " access to all the data can be"
#~ " controlled."
#~ msgstr ""

#~ msgid ""
#~ "One major difference from Ethereum, in"
#~ " particular, is that Hyperledger Iroha "
#~ "allows users to perform common "
#~ "functions, such as creating and "
#~ "transferring digital assets, by using "
#~ "prebuilt commands that are in the "
#~ "system. This negates the need to "
#~ "write cumbersome and hard to test "
#~ "smart contracts, enabling developers to "
#~ "complete simple tasks faster and with"
#~ " less risk."
#~ msgstr ""

#~ msgid ""
#~ "Iroha has a novel, Byzantine fault "
#~ "tolerant consensus algorithm (called YAC "
#~ "[#f1]_) that is high-performance and "
#~ "allows for finality of transactions with"
#~ " low latency. Other frameworks either "
#~ "focus more on probabilistic consensus "
#~ "algorithms, such as Nakamoto Consensus, "
#~ "or sacrifice Byzantine fault tolerance."
#~ msgstr ""

#~ msgid ""
#~ "Also, Iroha's built-in commands are "
#~ "a major benefit compared to other "
#~ "platforms, since it is very simple "
#~ "to do common tasks such as create"
#~ " digital assets, register accounts, and "
#~ "transfer assets between accounts. Moreover,"
#~ " it narrows the attack vector, "
#~ "improving overall security of the "
#~ "system, as there are less things "
#~ "to fail."
#~ msgstr ""

#~ msgid ""
#~ "Finally, Iroha is the only ledger "
#~ "that has a robust permission system, "
#~ "allowing permissions to be set for "
#~ "all commands, queries, and joining of"
#~ " the network."
#~ msgstr ""

#~ msgid "Yet Another Consensus"
#~ msgstr ""

#~ msgid ""
#~ "As per the latest review date of"
#~ " these docs, according to `Huawei "
#~ "Caliper <https://github.com/hyperledger/caliper>`_ testing"
#~ " tool, Iroha is capable of processing"
#~ " 45 transactions per second. Theoretically,"
#~ " this is not even close to the"
#~ " limit of the system, and we "
#~ "will continue constant optimizations in "
#~ "order to improve stability and "
#~ "performance."
#~ msgstr ""

#~ msgid ""
#~ "In order to bring the power of "
#~ "blockchain into your application, you "
#~ "should think first of how it is"
#~ " going to interface with Iroha peers."
#~ " A good start is to check `Core"
#~ " Concepts section "
#~ "<http://iroha.readthedocs.io/en/latest/core_concepts/>`_, "
#~ "explaining what exactly is a transaction"
#~ " and query, and how users of "
#~ "your application are supposed to "
#~ "interact with it."
#~ msgstr ""

#~ msgid ""
#~ "We also have several client libraries"
#~ " which provide tools for developers "
#~ "to form building blocks, such as "
#~ "signatures, commands, send messages to "
#~ "Iroha peers and check the status."
#~ msgstr ""

#~ msgid "Java Library"
#~ msgstr ""

#~ msgid "Java 6"
#~ msgstr ""

#~ msgid "Gradle"
#~ msgstr ""

#~ msgid "Build Process"
#~ msgstr ""

#~ msgid "Clone Iroha repository"
#~ msgstr ""

#~ msgid ""
#~ "For the latest version checkout a "
#~ "``develop`` branch by adding ``-b "
#~ "develop`` parameter."
#~ msgstr ""

#~ msgid ""
#~ "Now we need to build our Java "
#~ "native library. Run "
#~ "``example/java/build_library.sh``, which will take"
#~ " care of it."
#~ msgstr ""

#~ msgid ""
#~ "``build_library.sh`` script creates a ``dist``"
#~ " folder with files, needed in :ref"
#~ ":`java-how-to-use` section."
#~ msgstr ""

#~ msgid "How to Use"
#~ msgstr ""

#~ msgid "There are two ways of adding the Java library to your project:"
#~ msgstr ""

#~ msgid "Import Java bindings through Maven Central"
#~ msgstr ""

#~ msgid "Compile Java bindings manually"
#~ msgstr ""

#~ msgid "Import Java Bindings from Maven Central"
#~ msgstr ""

#~ msgid ""
#~ "First of all, you need to copy "
#~ "``example/java/dist/libirohajava.jnilib`` to the "
#~ "root folder of your project."
#~ msgstr ""
#~ "Tout d'abord, copier "
#~ "``example/java/dist/libirohajava.jnilib`` au dossier "
#~ "racine de votre projet."

#~ msgid ""
#~ "If you use **Gradle**, add the "
#~ "following line to your ``build.gradle`` "
#~ "file:"
#~ msgstr ""

#~ msgid "build.gradle"
#~ msgstr ""

#~ msgid "pom.xml"
#~ msgstr ""

#~ msgid ""
#~ "Set the latest version number from "
#~ "our `Maven repository "
#~ "<https://mvnrepository.com/artifact/jp.co.soramitsu/iroha>`_"
#~ msgstr ""

#~ msgid "Compiling Java Bindings Manually"
#~ msgstr ""

#~ msgid ""
#~ "Java bindings were compiled with "
#~ "``example/java/build_library.sh`` in `Build Process`"
#~ " section. You need to copy "
#~ "``example/java/dist/libirohajava.jnilib`` to the "
#~ "root folder of your project:"
#~ msgstr ""

#~ msgid ""
#~ "If you use **Gradle**, you need to"
#~ " copy ``example/java/dist/iroha_lib.jar`` to the"
#~ " ``libs`` folder of your project"
#~ msgstr ""

#~ msgid "Then please add the following to your ``build.gradle`` file:"
#~ msgstr ""

#~ msgid "After it please add this to your ``pom.xml``:"
#~ msgstr ""

#~ msgid ""
#~ "Explore ``example/java/TransactionExample.java`` file "
#~ "to get an idea of how to "
#~ "work with a library."
#~ msgstr ""

#~ msgid ""
#~ "To run this example, you need an"
#~ " Iroha node up and running. Please"
#~ " check out :ref:`getting-started` if "
#~ "you want to learn how to start "
#~ "it."
#~ msgstr ""

#~ msgid "Running the Example"
#~ msgstr ""

#~ msgid "To start the example, you need to build the example:"
#~ msgstr ""

#~ msgid "Now, to run this example please write:"
#~ msgstr ""

#~ msgid "Node.js Library"
#~ msgstr ""

#~ msgid ""
#~ "Please note that Node.js library is "
#~ "under heavy testing now and problems "
#~ "`might` occur. Don't hesitate to report"
#~ " them to us."
#~ msgstr ""

#~ msgid ""
#~ "There are two main ways of "
#~ "obtaining the Node.js library. If you"
#~ " are a happy macOS or Linux "
#~ "user, you can install it `through "
#~ "NPM <#installing-through-npm>`_. If your"
#~ " system is not yet supported or "
#~ "you want to try the latest "
#~ "version, you can `build this library "
#~ "manually <#building-manually>`_."
#~ msgstr ""

#~ msgid "Node.js (>=7) (you can try using lower versions though)."
#~ msgstr ""

#~ msgid "Installing Through NPM"
#~ msgstr ""

#~ msgid ""
#~ "If you are a happy macOS or "
#~ "Linux user, you can install the "
#~ "library from `NPM repository "
#~ "<https://www.npmjs.com/package/iroha-lib>`_ using "
#~ "NPM"
#~ msgstr ""

#~ msgid "Now you can import it in your project"
#~ msgstr ""

#~ msgid "Building Manually"
#~ msgstr ""

#~ msgid ""
#~ "You need this section if you want"
#~ " to build iroha-lib manually for "
#~ "example if your architecture/OS is not"
#~ " supported yet."
#~ msgstr ""

#~ msgid "CMake (>=3.8.2)"
#~ msgstr ""

#~ msgid "Protobuf (>=3.5.1)"
#~ msgstr ""

#~ msgid "Boost (>=1.65.1)"
#~ msgstr ""

#~ msgid "macOS users can install dependencies with following commands:"
#~ msgstr ""

#~ msgid ""
#~ "If you have SWIG already installed, "
#~ "you **MUST** install patched 3.0.12 "
#~ "version instead using `this patch <https"
#~ "://patch-"
#~ "diff.githubusercontent.com/raw/swig/swig/pull/968.patch>`_. The"
#~ " current version of SWIG doesn't "
#~ "support Node.js versions higher than 6."
#~ " Also you can just delete the "
#~ "global installed SWIG and iroha will "
#~ "pull and build it automatically."
#~ msgstr ""

#~ msgid "Go to the NPM package directory and start the build process"
#~ msgstr ""

#~ msgid "That's all. You can use the library now."
#~ msgstr ""

#~ msgid ""
#~ "Explore ``example/node/index.js`` file to get"
#~ " an idea of how to work with"
#~ " a library."
#~ msgstr ""

#~ msgid ""
#~ "To start the example, you need to"
#~ " install all its dependencies (basically"
#~ " ``iroha-lib``)"
#~ msgstr ""

#~ msgid ""
#~ "if you have built the library "
#~ "manually, please change import paths to"
#~ " ``path-to-iroha/shared_model/packages/javascript`` "
#~ "in index.js"
#~ msgstr ""

#~ msgid "Python Library"
#~ msgstr "Librairie Python"

#~ msgid ""
#~ "There are two ways to get Iroha"
#~ " library for Python: via pip and "
#~ "manual compilation from source code. The"
#~ " installation via pip do the same "
#~ "steps as manual compilation so for "
#~ "both of them you need to install"
#~ " all of the prerequisites."
#~ msgstr ""

#~ msgid "CMake, git, g++, boost, swig, protobuf, python"
#~ msgstr ""

#~ msgid "Install Iroha Python Libraries"
#~ msgstr ""

#~ msgid "Via PIP"
#~ msgstr ""

#~ msgid "For the latest version"
#~ msgstr "Pour les versions les plus récentes"

#~ msgid "Source code"
#~ msgstr "Code source"

#~ msgid ""
#~ "For the latest version checkout to "
#~ "develop branch by adding *-b develop*"
#~ " parameter."
#~ msgstr ""

#~ msgid ""
#~ "After this you can find Iroha "
#~ "python library in "
#~ "**iroha/build/shared_model/bindings** folder, where "
#~ "you have previously cloned repository."
#~ msgstr ""

#~ msgid "Compile Protobuf Modules of Iroha from Schema Files"
#~ msgstr ""

#~ msgid ""
#~ "Iroha communicates with users through "
#~ "protobuf messages. In order to send "
#~ "transactions and queries to Iroha node"
#~ " you need to get python module "
#~ "for generating protobuf messages. First "
#~ "of all you need to clone schema"
#~ " folder of Iroha repository. If you"
#~ " have already cloned Iroha repository "
#~ "in the previous step, just use "
#~ "schema folder from there."
#~ msgstr ""

#~ msgid "protobuf, pip"
#~ msgstr ""

#~ msgid "Building Protobuf Files"
#~ msgstr ""

#~ msgid ""
#~ "Protobuf files can be found in "
#~ "**iroha-schema** folder ('\\*_pb2\\*.py' files)"
#~ msgstr ""

#~ msgid "In order to specify Iroha libraries location:"
#~ msgstr ""

#~ msgid "Import Iroha and all of the protobuf modules that you need:"
#~ msgstr ""

#~ msgid ""
#~ "Work with byte arrays is different "
#~ "in Python 2 and Python 3. Due "
#~ "to this fact, the work with hashes"
#~ " and blobs is different in the "
#~ "examples. Given examples work fine with"
#~ " both versions of Python."
#~ msgstr ""

#~ msgid "Import Iroha and schema classes, generated from Iroha protobuf:"
#~ msgstr ""

#~ msgid "Get Iroha objects:"
#~ msgstr ""

#~ msgid "Read public and private keys:"
#~ msgstr ""

#~ msgid "Print transaction status with synchronous simple call:"
#~ msgstr ""

#~ msgid "Or streaming call:"
#~ msgstr ""

#~ msgid "Send transactions to Iroha:"
#~ msgstr ""

#~ msgid "Send query to Iroha and receive a responce:"
#~ msgstr ""

#~ msgid "Create domain and asset:"
#~ msgstr ""

#~ msgid "Create asset quantity:"
#~ msgstr ""

#~ msgid "Create account:"
#~ msgstr ""

#~ msgid "Send asset:"
#~ msgstr ""

#~ msgid "Get asset info:"
#~ msgstr ""

#~ msgid "Get account asset:"
#~ msgstr ""

#~ msgid "Building Iroha"
#~ msgstr ""

#~ msgid ""
#~ "In this guide we will learn how"
#~ " to install all dependencies, required "
#~ "to build Iroha and how to build"
#~ " it."
#~ msgstr ""

#~ msgid "Preparing the Environment"
#~ msgstr ""

#~ msgid ""
#~ "In order to successfully build Iroha,"
#~ " we need to configure the "
#~ "environment. There are several ways to"
#~ " do it and we will describe all"
#~ " of them."
#~ msgstr ""

#~ msgid ""
#~ "Currently, we support Unix-like systems"
#~ " (we are basically targeting popular "
#~ "Linux distros and macOS). If you "
#~ "happen to have Windows or you "
#~ "don't want to spend time installing "
#~ "all dependencies you might want to "
#~ "consider using Docker environment. Also, "
#~ "Windows users might consider using `WSL"
#~ " <https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux>`_"
#~ msgstr ""

#~ msgid ""
#~ "Having troubles? Check FAQ section or"
#~ " communicate to us directly, in case"
#~ " you were stuck on something. We "
#~ "don't expect this to happen, but "
#~ "some issues with an environment are "
#~ "possible."
#~ msgstr ""

#~ msgid ""
#~ "You don't need Docker to run "
#~ "Iroha, it is just one of the "
#~ "possible choices."
#~ msgstr ""

#~ msgid ""
#~ "First of all, you need to install"
#~ " ``docker`` and ``docker-compose``. You "
#~ "can read how to install it on "
#~ "a `Docker's website <https://www.docker.com"
#~ "/community-edition/>`_"
#~ msgstr ""

#~ msgid "Please, use the latest available docker daemon and docker-compose."
#~ msgstr ""

#~ msgid ""
#~ "Then you should clone the `Iroha "
#~ "repository <https://github.com/hyperledger/iroha>`_ to "
#~ "the directory of your choice."
#~ msgstr ""

#~ msgid ""
#~ "After it, you need to run the "
#~ "development environment. Run the ``scripts"
#~ "/run-iroha-dev.sh`` script:"
#~ msgstr ""

#~ msgid ""
#~ "Please make sure that Docker is "
#~ "running before executing the script. "
#~ "macOS users could find a Docker "
#~ "icon in system tray, Linux user "
#~ "could use ``systemctl start docker``"
#~ msgstr ""

#~ msgid "After you execute this script, following things happen:"
#~ msgstr ""

#~ msgid ""
#~ "1. The script checks if you don't"
#~ " have containers with Iroha already "
#~ "running. Successful completion finishes with"
#~ " the new container shell. 2. The "
#~ "script will download ``iroha-docker-"
#~ "develop`` and ``postgres`` images. ``iroha-"
#~ "docker-develop`` image contains all "
#~ "development dependencies and is based on"
#~ " top of ``ubuntu:16.04``. ``postgres`` "
#~ "image is required for starting and "
#~ "running Iroha. 3. Two containers are "
#~ "created and launched. 4. The user "
#~ "is attached to the interactive "
#~ "environment for development and testing "
#~ "with ``iroha`` folder mounted from the"
#~ " host machine. Iroha folder is "
#~ "mounted to ``/opt/iroha`` in Docker "
#~ "container."
#~ msgstr ""

#~ msgid ""
#~ "Now your are ready to build Iroha!"
#~ " Please go to `Building Iroha` "
#~ "section."
#~ msgstr ""

#~ msgid "Linux"
#~ msgstr ""

#~ msgid "Boost"
#~ msgstr ""

#~ msgid ""
#~ "Iroha requires Boost of at least "
#~ "1.65 version. To install Boost libraries"
#~ " (``libboost-all-dev``), use `current "
#~ "release <http://www.boost.org/users/download/>`_ from "
#~ "Boost webpage. The only dependencies are"
#~ " system and filesystem, so use "
#~ "``./bootstrap.sh --with-libraries=system,filesystem`` "
#~ "when you are building the project."
#~ msgstr ""

#~ msgid "Other Dependencies"
#~ msgstr "Autres dépendances"

#~ msgid "To build Iroha, you need following packages:"
#~ msgstr ""

#~ msgid ""
#~ "``build-essential`` ``automake`` ``libtool`` "
#~ "``libssl-dev`` ``zlib1g-dev`` ``libc6-dbg`` "
#~ "``golang`` ``git`` ``tar`` ``gzip`` ``ca-"
#~ "certificates`` ``wget`` ``curl`` ``file`` "
#~ "``unzip`` ``python`` ``cmake``"
#~ msgstr ""

#~ msgid "Use this code to install dependencies on Debian-based Linux distro."
#~ msgstr ""

#~ msgid ""
#~ "If you are willing to actively "
#~ "develop Iroha and to build shared "
#~ "libraries, please consider installing the "
#~ "`latest release <https://cmake.org/download/>`_ of"
#~ " CMake."
#~ msgstr ""

#~ msgid "macOS"
#~ msgstr ""

#~ msgid ""
#~ "If you want to build it from "
#~ "scratch and actively develop it, please"
#~ " use this code to install all "
#~ "dependencies with Homebrew."
#~ msgstr ""

#~ msgid "To install the Homebrew itself please run"
#~ msgstr ""

#~ msgid ""
#~ "``ruby -e \"$(curl -fsSL "
#~ "https://raw.githubusercontent.com/homebrew/install/master/install)\"``"
#~ msgstr ""

#~ msgid "Cloning the Repository"
#~ msgstr "Cloner le répertoire"

#~ msgid ""
#~ "Clone the `Iroha repository "
#~ "<https://github.com/hyperledger/iroha>`_ to the "
#~ "directory of your choice."
#~ msgstr ""

#~ msgid ""
#~ "If you have installed the prerequisites"
#~ " with Docker, you don't need to "
#~ "clone Iroha again, because when you "
#~ "run ``run-iroha-dev.sh`` it attaches "
#~ "to Iroha source code folder. Feel "
#~ "free to edit source code files "
#~ "with your host environment and build "
#~ "it within docker container."
#~ msgstr ""

#~ msgid "To build Iroha, use those commands"
#~ msgstr ""

#~ msgid ""
#~ "Alternatively, you can use these "
#~ "shorthand parameters (they are not "
#~ "documented though)"
#~ msgstr ""

#~ msgid ""
#~ "On macOS ``$(nproc)`` variable does not"
#~ " work. Check the number of logical"
#~ " cores with ``sysctl -n hw.ncpu`` and"
#~ " put it explicitly in the command "
#~ "above, e.g. ``cmake --build build -- "
#~ "-j4``"
#~ msgstr ""

#~ msgid "CMake Parameters"
#~ msgstr ""

#~ msgid ""
#~ "We use CMake to build platform-"
#~ "dependent build files. It has numerous"
#~ " flags for configuring the final "
#~ "build. Note that besides the listed "
#~ "parameters cmake's variables can be "
#~ "useful as well. Also as long as"
#~ " this page can be deprecated (or "
#~ "just not complete) you can browse "
#~ "custom flags via ``cmake -L``, "
#~ "``cmake-gui``, or ``ccmake``."
#~ msgstr ""

#~ msgid ""
#~ "You can specify parameters at the "
#~ "cmake configuring stage (e.g cmake "
#~ "-DTESTING=ON)."
#~ msgstr ""

#~ msgid "Main Parameters"
#~ msgstr ""

#~ msgid "Possible values"
#~ msgstr "Valeurs possibles"

#~ msgid "Default"
#~ msgstr ""

#~ msgid "TESTING"
#~ msgstr ""

#~ msgid "ON/OFF"
#~ msgstr ""

#~ msgid "ON"
#~ msgstr ""

#~ msgid "Enables or disables build of the tests"
#~ msgstr ""

#~ msgid "BENCHMARKING"
#~ msgstr ""

#~ msgid "OFF"
#~ msgstr ""

#~ msgid "Enables or disables build of the Google Benchmarks library"
#~ msgstr ""

#~ msgid "COVERAGE"
#~ msgstr ""

#~ msgid "Enables or disables lcov setting for code coverage generation"
#~ msgstr ""

#~ msgid "SWIG_PYTHON"
#~ msgstr ""

#~ msgid "Enables of disables the library building and Python bindings"
#~ msgstr ""

#~ msgid "SWIG_JAVA"
#~ msgstr ""

#~ msgid "Enables of disables the library building and Java bindings"
#~ msgstr ""

#~ msgid "Packaging Specific Parameters"
#~ msgstr ""

#~ msgid "ENABLE_LIBS_PACKAGING"
#~ msgstr ""

#~ msgid "Enables or disables all types of packaging"
#~ msgstr ""

#~ msgid "PACKAGE_ZIP"
#~ msgstr ""

#~ msgid "Enables or disables zip packaging"
#~ msgstr ""

#~ msgid "PACKAGE_TGZ"
#~ msgstr ""

#~ msgid "Enables or disables tar.gz packaging"
#~ msgstr ""

#~ msgid "PACKAGE_RPM"
#~ msgstr ""

#~ msgid "Enables or disables rpm packaging"
#~ msgstr ""

#~ msgid "PACKAGE_DEB"
#~ msgstr ""

#~ msgid "Enables or disables deb packaging"
#~ msgstr ""

#~ msgid "Running Tests (optional)"
#~ msgstr ""

#~ msgid ""
#~ "After building Iroha, it is a good"
#~ " idea to run tests to check the"
#~ " operability of the daemon. You can"
#~ " run tests with this code:"
#~ msgstr ""

#~ msgid "Alternatively, you can run following command in the ``build`` folder"
#~ msgstr ""

#~ msgid ""
#~ "Some of the tests will fail "
#~ "without PostgreSQL storage running, so "
#~ "if you are not using ``scripts/run-"
#~ "iroha-dev.sh`` script please run Docker"
#~ " container or create a local "
#~ "connection with following parameters:"
#~ msgstr ""

#~ msgid "Installing Dependencies"
#~ msgstr "Installation des dépendances"

#~ msgid ""
#~ "This page contains references and guides"
#~ " about installation of various tools "
#~ "you may need during build of "
#~ "different targets of Iroha project."
#~ msgstr ""

#~ msgid ""
#~ "Please note that most likely you "
#~ "do not need to install all the "
#~ "listed tools. Some of them are "
#~ "required only for building specific "
#~ "versions of Iroha Client Library."
#~ msgstr ""

#~ msgid "Automake"
#~ msgstr ""

#~ msgid "Installation on Ubuntu"
#~ msgstr "Installation sur Ubuntu"

#~ msgid "Bison"
#~ msgstr ""

#~ msgid "CMake"
#~ msgstr ""

#~ msgid ""
#~ "Minimum required version is 3.8, but "
#~ "we recommend to install the latest "
#~ "available version (3.10.3 at the "
#~ "moment)."
#~ msgstr ""

#~ msgid ""
#~ "Since Ubuntu repositories contain unsuitable"
#~ " version of CMake, you need to "
#~ "install the new one manually. Here "
#~ "is how to build and install CMake"
#~ " from sources."
#~ msgstr ""

#~ msgid "Installation on macOS"
#~ msgstr ""

#~ msgid "Git"
#~ msgstr "Git"

#~ msgid "Python"
#~ msgstr "Python"

#~ msgid "For Python 2:"
#~ msgstr "Pour Python 2:"

#~ msgid "For Python 3:"
#~ msgstr "Pour Python 3:"

#~ msgid "PIP"
#~ msgstr "PIP"

#~ msgid "SWIG"
#~ msgstr ""

#~ msgid "Protobuf"
#~ msgstr ""

#~ msgid ""
#~ "Please note that due to a known"
#~ " issue you would not get any "
#~ "exception if you pass invalid precision"
#~ " value. Valid range is: 0 <= "
#~ "precision <= 255"
#~ msgstr ""

#~ msgid "0 <= precision <= 255"
#~ msgstr ""

#~ msgid "RolePermission"
#~ msgstr ""

#~ msgid "id of the account to which the rights are granted"
#~ msgstr ""

#~ msgid "GrantablePermission name"
#~ msgstr ""

#~ msgid "name of grantable permission"
#~ msgstr ""

#~ msgid ""
#~ "If there was a value for a "
#~ "given key already in the storage "
#~ "then it will be replaced with the"
#~ " new value"
#~ msgstr ""

#~ msgid "id of the account to which the key-value information was set"
#~ msgstr ""

#~ msgid ""
#~ "number of signatories needed to be "
#~ "included within a transaction from this"
#~ " account"
#~ msgstr ""

#~ msgid "ID of the account to withdraw the asset from"
#~ msgstr ""

#~ msgid "ID of the account to send the asset to"
#~ msgstr ""

#~ msgid "ID of the asset to transfer"
#~ msgstr ""

#~ msgid "Message to attach to the transfer"
#~ msgstr ""

#~ msgid "Get Pending Transactions"
#~ msgstr ""

#~ msgid ""
#~ "GetPendingTransactions is used for retrieving"
#~ " a list of pending (not fully "
#~ "signed) `multisignature transactions "
#~ "<../core_concepts/glossary.html#multisignature-transactions>`_"
#~ " or `batches of transactions "
#~ "<../core_concepts/glossary.html#batch-of-transactions>`__"
#~ " issued by account of query creator."
#~ msgstr ""

#~ msgid ""
#~ "The response contains a list of "
#~ "`pending transactions <../core_concepts/glossary.html"
#~ "#pending-transactions>`_."
#~ msgstr ""

#~ msgid "an array of pending transactions"
#~ msgstr ""

#~ msgid "Pending transactions"
#~ msgstr ""

#~ msgid ""
#~ "In a case when a list of "
#~ "transactions per account is needed, "
#~ "`GetAccountTransactions` query can be formed."
#~ " .. note:: This query uses pagination"
#~ " for query responses."
#~ msgstr ""

#~ msgid "Page size"
#~ msgstr ""

#~ msgid ""
#~ "size of the page to be returned"
#~ " by the query, if the response "
#~ "contains fewer transactions than a page"
#~ " size, then next tx hash will "
#~ "be empty in response"
#~ msgstr ""

#~ msgid "page_size > 0"
#~ msgstr ""

#~ msgid "First tx hash"
#~ msgstr ""

#~ msgid ""
#~ "hash of the first transaction in "
#~ "the page. If that field is not "
#~ "set — then the first transactions "
#~ "are returned"
#~ msgstr ""

#~ msgid "hash in hex format"
#~ msgstr ""

#~ msgid "bddd58404d1315e0eb27902c5d7c8eb0602c16238f005773df406bc191308929"
#~ msgstr ""

#~ msgid "All transactions size"
#~ msgstr ""

#~ msgid "total number of transactions created by the given account"
#~ msgstr ""

#~ msgid "100"
#~ msgstr ""

#~ msgid "Next transaction hash"
#~ msgstr ""

#~ msgid ""
#~ "hash pointing to the next transaction"
#~ " after the last transaction in the"
#~ " page. Empty if a page contains "
#~ "the last transaction for the given "
#~ "account"
#~ msgstr ""

#~ msgid ""
#~ "`GetAccountAssetTransactions` query returns all "
#~ "transactions associated with given account "
#~ "and asset. .. note:: This query "
#~ "uses pagination for query responses."
#~ msgstr ""

#~ msgid "total number of transactions for given account and asset"
#~ msgstr ""

#~ msgid ""
#~ "hash pointing to the next transaction"
#~ " after the last transaction in the"
#~ " page. Empty if a page contains "
#~ "the last transaction for given account"
#~ " and asset"
#~ msgstr ""

#~ msgid ""
#~ "To get the state of all assets "
#~ "in an account (a balance), "
#~ "`GetAccountAssets` query can be used."
#~ msgstr ""

#~ msgid "Get Account Detail"
#~ msgstr ""

#~ msgid ""
#~ "To get details of the account, "
#~ "`GetAccountDetail` query can be used. "
#~ "Account details are key-value pairs, "
#~ "splitted into writers categories. Writers "
#~ "are accounts, which added the "
#~ "corresponding account detail. Example of "
#~ "such structure is:"
#~ msgstr ""

#~ msgid ""
#~ "Here, one can see four account "
#~ "details - \"age\", \"hobbies\" and "
#~ "\"sports\" - added by two writers "
#~ "- \"account@a_domain\" and \"account@b_domain\". "
#~ "All of these details, obviously, are "
#~ "about the same account."
#~ msgstr ""

#~ msgid ""
#~ "Pay attention, that all fields are "
#~ "optional. Reasons will be described "
#~ "later."
#~ msgstr ""

#~ msgid "account id to get details from"
#~ msgstr ""

#~ msgid "account@domain"
#~ msgstr ""

#~ msgid "key, under which to get details"
#~ msgstr ""

#~ msgid "string"
#~ msgstr ""

#~ msgid "age"
#~ msgstr ""

#~ msgid "Writer"
#~ msgstr ""

#~ msgid "account id of writer"
#~ msgstr ""

#~ msgid "Detail"
#~ msgstr ""

#~ msgid "key-value pairs with account details"
#~ msgstr ""

#~ msgid "see below"
#~ msgstr ""

#~ msgid "Usage Examples"
#~ msgstr ""

#~ msgid ""
#~ "Let's again consider the example of "
#~ "details from the beginning and see, "
#~ "how different variants of `GetAccountDetail`"
#~ " queries will change the resulting "
#~ "response."
#~ msgstr ""

#~ msgid "**account_id is not set**"
#~ msgstr ""

#~ msgid ""
#~ "If account_id is not set - other"
#~ " fields can be empty or not -"
#~ " it will automatically be substituted "
#~ "with query creator's account, which will"
#~ " lead to one of the next cases."
#~ msgstr ""

#~ msgid "**only account_id is set**"
#~ msgstr ""

#~ msgid ""
#~ "In this case, all details about "
#~ "that account are going to be "
#~ "returned, leading to the following "
#~ "response:"
#~ msgstr ""

#~ msgid "**account_id and key are set**"
#~ msgstr ""

#~ msgid ""
#~ "Here, details added by all writers "
#~ "under the key are going to be "
#~ "returned. For example, if we asked "
#~ "for the key \"age\", that's the "
#~ "response we would get:"
#~ msgstr ""

#~ msgid "**account_id and writer are set**"
#~ msgstr ""

#~ msgid ""
#~ "Now, the response will contain all "
#~ "details about this account, added by "
#~ "one specific writer. For example, if "
#~ "we asked for writer \"account@b_domain\", "
#~ "we would get:"
#~ msgstr ""

#~ msgid "**account_id, key and writer are set**"
#~ msgstr ""

#~ msgid ""
#~ "Lastly, if all three field are "
#~ "set, result will contain details, added"
#~ " the specific writer and under the"
#~ " specific key, for example, if we "
#~ "asked for key \"age\" and writer "
#~ "\"account@a_domain\", we would get:"
#~ msgstr ""

#~ msgid "`List of Iroha permissions <../maintenance/permissions.html>`_."
#~ msgstr ""

#~ msgid ""
#~ "In the context of transactions signing,"
#~ " quorum number is a minimum amount"
#~ " of signatures required to consider a"
#~ " transaction signed. The default value "
#~ "is 1. Each account can link "
#~ "additional public keys and increase own"
#~ " quorum number."
#~ msgstr ""

#~ msgid "Signatory"
#~ msgstr ""

#~ msgid ""
#~ "Represents an entity that can confirm"
#~ " multisignature transactions for some "
#~ "`account <#account>`__. It can be "
#~ "attached to account via `AddSignatory "
#~ "<../api/commands.html#add-signatory>`__ and detached"
#~ " via `RemoveSignatory <../api/commands.html#remove-"
#~ "signatory>`__."
#~ msgstr ""

#~ msgid "Transaction Structure"
#~ msgstr ""

#~ msgid "**Payload** stores all transaction fields, except signatures:"
#~ msgstr ""

#~ msgid "Time of creation (unix time, in milliseconds)"
#~ msgstr ""

#~ msgid "Account ID of transaction creator (username@domain)"
#~ msgstr ""

#~ msgid "Quorum field (indicates required number of signatures)"
#~ msgstr ""

#~ msgid ""
#~ "Repeated commands which are described in"
#~ " details in `commands section "
#~ "<../api/commands.html>`__"
#~ msgstr ""

#~ msgid ""
#~ "Batch meta information (optional part). "
#~ "See `Batch of Transactions`_ for details"
#~ msgstr ""

#~ msgid ""
#~ "**Signatures** contain one or many "
#~ "signatures (ed25519 public key + "
#~ "signature)"
#~ msgstr ""

#~ msgid "Reduced Transaction Hash"
#~ msgstr ""

#~ msgid ""
#~ "Reduced hash is calculated over "
#~ "transaction payload excluding batch meta "
#~ "information. Used in `Batch of "
#~ "Transactions`_."
#~ msgstr ""

#~ msgid "Transaction Statuses"
#~ msgstr ""

#~ msgid ""
#~ "Hyperledger Iroha supports both push and"
#~ " pull interaction mode with a client."
#~ " A client that uses pull mode "
#~ "requests status updates about transactions "
#~ "from Iroha peer by sending transaction"
#~ " hashes and awaiting a response. In"
#~ " contrary push interaction is done "
#~ "over the listening of an event "
#~ "stream for each transaction. In any "
#~ "of these modes, the set of "
#~ "transaction statuses is the same:"
#~ msgstr ""

#~ msgid "Transaction Status Set"
#~ msgstr ""

#~ msgid "NOT_RECEIVED: requested peer does not have this transaction."
#~ msgstr ""

#~ msgid ""
#~ "MST_EXPIRED: this transactions is a part"
#~ " of MST pipeline and has expired."
#~ msgstr ""

#~ msgid ""
#~ "STATELESS_VALIDATION_FAILED: the transaction was "
#~ "formed with some fields, not meeting "
#~ "stateless validation constraints. This status"
#~ " is returned to a client, who "
#~ "formed transaction, right after the "
#~ "transaction was sent. It would also "
#~ "return the reason — what rule was"
#~ " violated."
#~ msgstr ""

#~ msgid ""
#~ "STATELESS_VALIDATION_SUCCESS: the transaction has"
#~ " successfully passed stateless validation. "
#~ "This status is returned to a "
#~ "client, who formed transaction, right "
#~ "after the transaction was sent."
#~ msgstr ""

#~ msgid ""
#~ "STATEFUL_VALIDATION_FAILED: the transaction has "
#~ "commands, which violate validation rules, "
#~ "checking state of the chain (e.g. "
#~ "asset balance, account permissions, etc.). "
#~ "It would also return the reason —"
#~ " what rule was violated."
#~ msgstr ""

#~ msgid ""
#~ "STATEFUL_VALIDATION_SUCCESS: the transaction has "
#~ "successfully passed stateful validation."
#~ msgstr ""

#~ msgid ""
#~ "COMMITTED: the transaction is the part"
#~ " of a block, which gained enough "
#~ "votes and is in the block store"
#~ " at the moment."
#~ msgstr ""

#~ msgid "Pending Transactions"
#~ msgstr ""

#~ msgid ""
#~ "Any transaction that has lesser "
#~ "signatures at the moment than `quorum`_"
#~ " of transaction creator account is "
#~ "considered as pending. Pending transaction "
#~ "will be submitted for `stateful "
#~ "validation`_ as soon as `multisignature "
#~ "<#multisignature-transactions>`__ mechanism will "
#~ "collect required amount of signatures "
#~ "for quorum."
#~ msgstr ""

#~ msgid ""
#~ "Transaction that already has quorum of"
#~ " signatures can also be considered as"
#~ " pending in cases when the "
#~ "transaction is a part of `batch of"
#~ " transactions`_ and there is a not"
#~ " fully signed transaction."
#~ msgstr ""

#~ msgid "Batch of Transactions"
#~ msgstr ""

#~ msgid "*The feature is to be released.*"
#~ msgstr ""

#~ msgid ""
#~ "Transactions batch is a feature that "
#~ "allows sending several transactions to "
#~ "Iroha at once preserving their order."
#~ msgstr ""

#~ msgid ""
#~ "Each transaction within a batch includes"
#~ " batch meta information. Batch meta "
#~ "contains batch type identifier (atomic "
#~ "or ordered) and a list of `reduced"
#~ " hashes <#reduced-transaction-hash>`_ of"
#~ " all transactions within a batch. The"
#~ " order of hashes prescribes transactions"
#~ " sequence."
#~ msgstr ""

#~ msgid ""
#~ "Batch can contain transactions created "
#~ "by different accounts. Any transaction "
#~ "within a batch can require single "
#~ "or `multiple <#multisignature-transactions>`__ "
#~ "signatures (depends on quorum set for"
#~ " an account of transaction creator). "
#~ "At least one transaction inside a "
#~ "batch should have at least one "
#~ "signature to let the batch pass "
#~ "`stateless validation`_."
#~ msgstr ""

#~ msgid "Atomic Batch"
#~ msgstr ""

#~ msgid ""
#~ "All the transactions within an atomic"
#~ " batch should pass `stateful validation`_"
#~ " for the batch to be applied to"
#~ " a ledger."
#~ msgstr ""

#~ msgid "Ordered Batch"
#~ msgstr ""

#~ msgid ""
#~ "Ordered batch preserves only the "
#~ "sequence of transactions applying to a"
#~ " ledger. All the transactions that "
#~ "able to pass stateful validation within"
#~ " a batch will be applied to a"
#~ " ledger. Validation failure of one "
#~ "transaction would NOT directly imply the"
#~ " failure of the whole batch."
#~ msgstr ""

#~ msgid "Multisignature Transactions"
#~ msgstr ""

#~ msgid ""
#~ "A transaction which has the `quorum`_"
#~ " greater than one is considered as"
#~ " multisignature (also called mst). To "
#~ "achieve `stateful validity <#stateful-"
#~ "validation>`__ the confirmation is required"
#~ " by the `signatories <#signatory>`__ of "
#~ "the creator account. These participants "
#~ "need to send the same transaction "
#~ "with their signature."
#~ msgstr ""

#~ msgid "Sections"
#~ msgstr ""

#~ msgid ""
#~ "To keep things simple, in this "
#~ "guide we will create a network "
#~ "containing only one node. To understand"
#~ " how to run several peers, follow "
#~ "`this guide. "
#~ "<github.com/hyperledger/iroha/tree/master/deploy/ansible>`_"
#~ msgstr ""

#~ msgid ""
#~ "``--depth=1`` option allows us to "
#~ "download only latest commit and save "
#~ "some time and bandwidth. If you "
#~ "want to get a full commit history,"
#~ " you can omit this option."
#~ msgstr ""

#~ msgid ""
#~ "``--entrypoint=/bin/bash \\`` Because "
#~ "``hyperledger/iroha`` has the custom script"
#~ " which runs after starting the "
#~ "container, we want to override it "
#~ "so we can start Iroha Daemon "
#~ "manually."
#~ msgstr ""

#~ msgid ""
#~ "``hyperledger/iroha:develop`` is the image "
#~ "which has the ``develop`` branch."
#~ msgstr ""

#~ msgid ""
#~ "Specifying a new genesis block using "
#~ "`--genesis_block` with blocks already present"
#~ " in ledger requires `--overwrite_ledger` "
#~ "flag to be set. The daemon will"
#~ " fail otherwise."
#~ msgstr ""

#~ msgid "Fund Management"
#~ msgstr ""

#~ msgid ""
#~ "With the support of multisignature "
#~ "transactions it is possible to maintain"
#~ " a fund by many managers. In "
#~ "that scheme investment can only be "
#~ "made after the confirmation of the "
#~ "quorum participants."
#~ msgstr ""

#~ msgid ""
#~ "The fund assets should be held at"
#~ " one account. Its signatories should "
#~ "be fund managers, who are dealing "
#~ "with investments and portfolio distributions."
#~ " That can be added via "
#~ "``AddSignatory`` command. All of the "
#~ "assets should be held within one "
#~ "account, which signatories represent the "
#~ "fund managers. Thus the concrete "
#~ "exchanges can be performed with the "
#~ "multisignature transaction so that everyone"
#~ " will decide on a particular "
#~ "financial decision. The one may confirm"
#~ " a deal by sending the original "
#~ "transaction and one of managers' "
#~ "signature. Iroha will maintain the "
#~ "transaction sending so that the deal "
#~ "will not be completed until it "
#~ "receives the required number of "
#~ "confirmation, which is parametrized with "
#~ "the transaction quorum parameter."
#~ msgstr ""

#~ msgid ""
#~ "``mst_enable`` enables or disables "
#~ "multisignature transaction support in Iroha."
#~ " We recommend setting this parameter "
#~ "to ``false`` at the moment until "
#~ "you really need it."
#~ msgstr ""

#~ msgid ""
#~ "1. The script checks if you don't"
#~ " have containers with Iroha already "
#~ "running. Successful completion finishes with"
#~ " the new container shell. 2. The "
#~ "script will download ``hyperledger/iroha:develop-"
#~ "build`` and ``postgres`` images. "
#~ "``hyperledger/iroha:develop-build`` image contains"
#~ " all development dependencies and is "
#~ "based on top of ``ubuntu:16.04``. "
#~ "``postgres`` image is required for "
#~ "starting and running Iroha. 3. Two "
#~ "containers are created and launched. 4."
#~ " The user is attached to the "
#~ "interactive environment for development and"
#~ " testing with ``iroha`` folder mounted "
#~ "from the host machine. Iroha folder "
#~ "is mounted to ``/opt/iroha`` in Docker"
#~ " container."
#~ msgstr ""

#~ msgid ""
#~ "Iroha requires Boost of at least "
#~ "1.65 version. To install Boost libraries"
#~ " (``libboost-all-dev``), use `current "
#~ "release <http://www.boost.org/users/download/>`_ from "
#~ "Boost webpage. The only dependencies are"
#~ " thread, system and filesystem, so "
#~ "use ``./bootstrap.sh --with-"
#~ "libraries=thread,system,filesystem`` when you are"
#~ " building the project."
#~ msgstr ""

#~ msgid ""
#~ "Minimum required version is 3.11.4, but"
#~ " we recommend to install the latest"
#~ " available version (3.12.0 at the "
#~ "moment)."
#~ msgstr ""

#~ msgid "Entity-relationship model"
#~ msgstr ""

#~ msgid ""
#~ "Each Hyperledger Iroha peer has a "
#~ "state, called \"World State View\", "
#~ "which is represented by a set of"
#~ " entities and relations between them. "
#~ "To explain you more which entities "
#~ "exist in the system and what are"
#~ " the relations, this sections includes "
#~ "ER diagram and an explanation of "
#~ "its components."
#~ msgstr ""

#~ msgid "ER diagram"
#~ msgstr ""

#~ msgid ""
#~ "address — network address and internal"
#~ " port, is used for synchronization, "
#~ "consensus, and communication with the "
#~ "ordering service"
#~ msgstr ""

#~ msgid ""
#~ "public_key — key, which will be "
#~ "used for signing blocks during consensus"
#~ " process"
#~ msgstr ""

#~ msgid "asset_id — identifier of asset, formatted as asset_name#domain_id"
#~ msgstr ""

#~ msgid ""
#~ "domain_id — identifier of domain, where"
#~ " the asset was created, references "
#~ "existing domain"
#~ msgstr ""

#~ msgid "precision — size of fractional part"
#~ msgstr ""

#~ msgid "data — JSON with arbitrary structure of asset description"
#~ msgstr ""

#~ msgid "public_key — a public key"
#~ msgstr ""

#~ msgid "domain_id — identifier of a domain"
#~ msgstr ""

#~ msgid ""
#~ "default_role — a default role per "
#~ "user created in the domain, references"
#~ " existing role"
#~ msgstr ""

#~ msgid "role_id — identifier of role"
#~ msgstr ""

#~ msgid "RoleHasPermissions"
#~ msgstr ""

#~ msgid "role_id — identifier of role, references existing role"
#~ msgstr ""

#~ msgid "permission_id — an id of predefined role"
#~ msgstr ""

#~ msgid "account_id — identifier of account, formatted as account_name@domain_id"
#~ msgstr ""

#~ msgid ""
#~ "domain_id — identifier of domain where"
#~ " the account was created, references "
#~ "existing domain"
#~ msgstr ""

#~ msgid ""
#~ "quorum — number of signatories required"
#~ " for creation of valid transaction "
#~ "from this account"
#~ msgstr ""

#~ msgid "transaction_count – counter of transactions created by this account"
#~ msgstr ""

#~ msgid "data — key-value storage for any information, related to the account"
#~ msgstr ""

#~ msgid "AccountHasSignatory"
#~ msgstr ""

#~ msgid "account_id — identifier of account, references existing account"
#~ msgstr ""

#~ msgid ""
#~ "public_key — a public key (which "
#~ "is also called signatory), references "
#~ "existing signatory"
#~ msgstr ""

#~ msgid "AccountHasAsset"
#~ msgstr ""

#~ msgid "asset_id — identifier of asset, references existing asset"
#~ msgstr ""

#~ msgid "amount — an amount of the asset, belonging to the account"
#~ msgstr ""

#~ msgid "AccountHasRoles"
#~ msgstr ""

#~ msgid "AccountHasGrantablePermissions"
#~ msgstr ""

#~ msgid ""
#~ "account_id — identifier of account, "
#~ "references existing account. This account "
#~ "gives grantable permission to perform "
#~ "operation over itself to permittee."
#~ msgstr ""

#~ msgid ""
#~ "permittee_account_id — identifier of account,"
#~ " references existing account. This account"
#~ " is given permission to perform "
#~ "operation over account_id."
#~ msgstr ""

#~ msgid "permission_id — identifier of grantable_permission"
#~ msgstr ""

#~ msgid "Deploying Iroha on Kubernetes cluster"
#~ msgstr ""

#~ msgid ""
#~ "By following this guide you will "
#~ "be able to deploy a Kubernetes "
#~ "cluster from scratch on AWS cloud "
#~ "using Terraform and Kubespray, and "
#~ "deploy a network of Iroha nodes on"
#~ " it."
#~ msgstr ""

#~ msgid "machine running Linux (tested on Ubuntu 16.04) or MacOS"
#~ msgstr ""

#~ msgid "Python 3.3+"
#~ msgstr ""

#~ msgid "boto3"
#~ msgstr ""

#~ msgid "Ansible 2.4+"
#~ msgstr ""

#~ msgid ""
#~ "*ed25519-cli* utility for key generation. "
#~ "Statically linked binary (for x86_64 "
#~ "platform) can be found in "
#~ "deploy/ansible/playbooks/iroha-k8s/scripts directory. "
#~ "You may need to `compile it "
#~ "yourself <https://github.com/Warchant/ed25519-cli>`__."
#~ msgstr ""

#~ msgid ""
#~ "You do not need the items below"
#~ " if you already have a working "
#~ "Kubernetes (k8s) cluster. You can skip"
#~ " to `Generating Iroha configs`_ chapter."
#~ msgstr ""

#~ msgid "Terraform 0.11.8+"
#~ msgstr ""

#~ msgid "AWS account for deploying a k8s cluster on EC2"
#~ msgstr ""

#~ msgid "Preparation"
#~ msgstr ""

#~ msgid ""
#~ "You need to obtain AWS key for "
#~ "managing resources. We recommend to "
#~ "create a separate IAM user for "
#~ "that. Go to your AWS console, head"
#~ " to \"My Security Credentials\" menu "
#~ "and create a user in \"Users\" "
#~ "section. Assign \"AmazonEC2FullAccess\" and "
#~ "\"AmazonVPCFullAccess\" policies to that user."
#~ " Click \"Create access key\" on "
#~ "Security credentials tab. Take a note"
#~ " for values of Access key ID "
#~ "and Secret key. Set these values "
#~ "as environment variables in your "
#~ "console:"
#~ msgstr ""

#~ msgid "Checkout the source tree from Github:"
#~ msgstr ""

#~ msgid "Setting up cloud infrastructure"
#~ msgstr ""

#~ msgid ""
#~ "We use Hashicorp's Terraform infrastructure"
#~ " management tool for automated deployment"
#~ " of AWS EC2 nodes in multiple "
#~ "regions. `Kubespray <https://github.com/kubernetes-"
#~ "incubator/kubespray>`__ Ansible module is used"
#~ " for setting up a production-grade"
#~ " k8s cluster."
#~ msgstr ""

#~ msgid ""
#~ "Terraform module creates 3 AWS instances"
#~ " in 3 different regions: eu-west-1,"
#~ " eu-west-2, eu-west-3 by default. "
#~ "Instance type is *c5.large*. There is"
#~ " a separate VPC created in every "
#~ "region. All created VPCs are then "
#~ "connected using VPC peering connection. "
#~ "That is to create a seamless "
#~ "network for k8s cluster."
#~ msgstr ""

#~ msgid ""
#~ "There are several configurable options: "
#~ "number of nodes in each region and"
#~ " its role in k8s cluster (kube-"
#~ "master or kube-node). They can be"
#~ " set either in *variables.tf* file or"
#~ " via environment variables (using the "
#~ "same variable name but prefixed with "
#~ "TF_VAR. See more in `Terraform docs "
#~ "<https://www.terraform.io/intro/getting-started/variables.html"
#~ "#from-environment-variables>`__). More options"
#~ " can be configured by tuning "
#~ "parameters in module's *variables.tf* file."
#~ msgstr ""

#~ msgid ""
#~ "You must set up SSH key in "
#~ "*deploy/tf/k8s/variables.tf* as well. Replace "
#~ "public key with your own. It will"
#~ " added on each created EC2 instance."
#~ msgstr ""

#~ msgid ""
#~ "Navigate to *deploy/tf/k8s* directory. "
#~ "Terraform needs to download required "
#~ "modules first:"
#~ msgstr ""

#~ msgid "Then run module execution:"
#~ msgstr ""

#~ msgid ""
#~ "Review the execution plan and type "
#~ "*yes* to approve. Upon completion you"
#~ " should see an output similar to "
#~ "this:"
#~ msgstr ""

#~ msgid ""
#~ "We are now ready to deploy k8s "
#~ "cluster. Wait a couple of minutes "
#~ "before instances are initialized."
#~ msgstr ""

#~ msgid "Setting up k8s cluster"
#~ msgstr ""

#~ msgid ""
#~ "There is an Ansible role for "
#~ "setting up k8s cluster. It is an"
#~ " external module called Kubespray. It "
#~ "is stored as a submodule in "
#~ "Hyperledger Iroha repository. This means "
#~ "it needs to be initialized first:"
#~ msgstr ""

#~ msgid "This command will download Kubespray from master repository."
#~ msgstr ""

#~ msgid "Install required dependencies:"
#~ msgstr ""

#~ msgid ""
#~ "Proceed to actual cluster deployment. "
#~ "Make sure you replaced *key-file* "
#~ "parameter with an actual path to "
#~ "SSH private key that was used "
#~ "previously during Terraform configuration. "
#~ "*REGIONS* variable corresponds to default "
#~ "list of regions used on a previous"
#~ " step. Modify it accordingly in case"
#~ " you added or removed any. Inventory"
#~ " file is a Python script that "
#~ "returns Ansible-compatible list of hosts"
#~ " filtered by tag."
#~ msgstr ""

#~ msgid "Upon successful completion you will have working k8s cluster."
#~ msgstr ""

#~ msgid "Generating Iroha configs"
#~ msgstr ""

#~ msgid ""
#~ "In order for Iroha to work "
#~ "properly it requires to generate a "
#~ "key pair for each node, genesis "
#~ "block and configuration file. This is"
#~ " usually a tedious and error-prone"
#~ " procedure, especially for a large "
#~ "number of nodes. We automated it "
#~ "with Ansible role. You can skip to"
#~ " `Deploying Iroha on the cluster`_ "
#~ "chapter if you want to quick start"
#~ " using default configs for k8s "
#~ "cluster with 4 Iroha replicas."
#~ msgstr ""

#~ msgid ""
#~ "Generate configuration files for *N* "
#~ "Iroha nodes. *replicas* variable controls "
#~ "the number of *N*:"
#~ msgstr ""

#~ msgid ""
#~ "You should find files created in "
#~ "*deploy/ansible/roles/iroha-k8s/files/conf*."
#~ msgstr ""

#~ msgid "Deploying Iroha on the cluster"
#~ msgstr ""

#~ msgid ""
#~ "Make sure you have configuration files"
#~ " in *deploy/ansible/roles/iroha-k8s/files*. "
#~ "Specifically, non-empty *conf* directory "
#~ "and *k8s-iroha.yaml* file."
#~ msgstr ""

#~ msgid ""
#~ "There are two options for managing "
#~ "k8s cluster: logging into either of "
#~ "master node and executing commands there"
#~ " or configure remote management. We "
#~ "will cover the second option here "
#~ "as the first one is trivial."
#~ msgstr ""

#~ msgid ""
#~ "In case you set up cluster using"
#~ " Kubespray, you can find *admin.conf* "
#~ "file on either of master node in"
#~ " */etc/kubernetes* directory. Copy this "
#~ "file on the control machine (the "
#~ "one you will be running *kubectl* "
#~ "command from). Make sure *server* "
#~ "parameter in this file points to "
#~ "external IP address or DNS name of"
#~ " a master node. Usually, there is "
#~ "a private IP address of the node"
#~ " (in case of AWS). Make sure "
#~ "*kubectl* utility is installed (`check "
#~ "out the docs <https://kubernetes.io/docs/tasks/tools"
#~ "/install-kubectl/>`__ for instructions)."
#~ msgstr ""

#~ msgid "Replace the default *kubectl* configuration:"
#~ msgstr ""

#~ msgid "We can now control the remote k8s cluster"
#~ msgstr ""

#~ msgid ""
#~ "*k8s-iroha.yaml* pod specification file "
#~ "requires the creation of a *config-"
#~ "map* first. This is a special "
#~ "resource that is mounted in the "
#~ "init container of each pod, and "
#~ "contains the configuration and genesis "
#~ "block files required to run Iroha."
#~ msgstr ""

#~ msgid ""
#~ "Each peer will have their public "
#~ "and private keys stored in a "
#~ "Kubernetes secret which is  mounted in"
#~ " the init container and copied over"
#~ " for Iroha to use. Peers will "
#~ "only be able read their assigned "
#~ "secret when running Iroha."
#~ msgstr ""

#~ msgid "Deploy Iroha network pod specification:"
#~ msgstr ""

#~ msgid ""
#~ "Wait a moment before each node "
#~ "downloads and starts Docker containers. "
#~ "Executing *kubectl get pods* command "
#~ "should eventually return a list of "
#~ "deployed pods each in *Running* state."
#~ msgstr ""

#~ msgid ""
#~ "Pods do not expose ports externally. "
#~ "You need to connect to Iroha "
#~ "instance by its hostname (iroha-0, "
#~ "iroha-1, etc). For that you have "
#~ "to have a running pod in the "
#~ "same network."
#~ msgstr ""

#~ msgid ""
#~ "Hyperledger Iroha uses a role-based "
#~ "access control system to limit actions"
#~ " of its users. This system greatly"
#~ " helps to implement use cases "
#~ "involving user groups having different "
#~ "access levels — ranging from the "
#~ "weak users, who can't even receive "
#~ "asset transfer to the super-users. "
#~ "The beauty of our permission system "
#~ "is that you don't have to have "
#~ "a super-user in your Iroha setup"
#~ " or use all the possible permissions:"
#~ " you can create segregated and "
#~ "lightweight roles."
#~ msgstr ""

#~ msgid ""
#~ "Maintenance of the system involves "
#~ "setting up roles and permissions, that"
#~ " are included in the roles. This "
#~ "might be done at the initial step"
#~ " of system deployment — in genesis"
#~ " block, or later when Iroha network"
#~ " is up and running, roles can "
#~ "be changed (if there is a role "
#~ "that can do that :)"
#~ msgstr ""

#~ msgid ""
#~ "This section will help you to "
#~ "understand permissions and give you an"
#~ " idea of how to create roles "
#~ "including certain permissions. Each permission"
#~ " is provided with an example written"
#~ " in Python that demonstrates the way"
#~ " of transaction or query creation, "
#~ "which require specific permission. Every "
#~ "example uses *commons.py* module, which "
#~ "listing is available at `Supplementary "
#~ "Sources`_ section."
#~ msgstr ""

#~ msgid "List of Permissions"
#~ msgstr ""

#~ msgid "Permission Name"
#~ msgstr ""

#~ msgid "Category"
#~ msgstr ""

#~ msgid "Type"
#~ msgstr ""

#~ msgid "`can_create_account`_"
#~ msgstr ""

#~ msgid "`can_set_detail`_"
#~ msgstr ""

#~ msgid "`can_set_my_account_detail`_ ``grantable``"
#~ msgstr ""

#~ msgid "`can_create_asset`_"
#~ msgstr ""

#~ msgid "`can_receive`_"
#~ msgstr ""

#~ msgid "`can_transfer`_"
#~ msgstr ""

#~ msgid "`can_transfer_my_assets`_ ``grantable``"
#~ msgstr ""

#~ msgid "`can_add_asset_qty`_"
#~ msgstr ""

#~ msgid "Asset Quantity"
#~ msgstr ""

#~ msgid "`can_subtract_asset_qty`_"
#~ msgstr ""

#~ msgid "`can_add_domain_asset_qty`_"
#~ msgstr ""

#~ msgid "`can_subtract_domain_asset_qty`_"
#~ msgstr ""

#~ msgid "`can_create_domain`_"
#~ msgstr ""

#~ msgid "`can_grant_can_add_my_signatory`_"
#~ msgstr ""

#~ msgid "Grant"
#~ msgstr ""

#~ msgid "`can_grant_can_remove_my_signatory`_"
#~ msgstr ""

#~ msgid "`can_grant_can_set_my_account_detail`_"
#~ msgstr ""

#~ msgid "`can_grant_can_set_my_quorum`_"
#~ msgstr ""

#~ msgid "`can_grant_can_transfer_my_assets`_"
#~ msgstr ""

#~ msgid "`can_add_peer`_"
#~ msgstr ""

#~ msgid "`can_append_role`_"
#~ msgstr ""

#~ msgid "`can_create_role`_"
#~ msgstr ""

#~ msgid "`can_detach_role`_"
#~ msgstr ""

#~ msgid "`can_add_my_signatory`_ ``grantable``"
#~ msgstr ""

#~ msgid "`can_add_signatory`_"
#~ msgstr ""

#~ msgid "`can_remove_my_signatory`_ ``grantable``"
#~ msgstr ""

#~ msgid "`can_remove_signatory`_"
#~ msgstr ""

#~ msgid "`can_set_my_quorum`_ ``grantable``"
#~ msgstr ""

#~ msgid "`can_set_quorum`_"
#~ msgstr ""

#~ msgid "`can_get_all_acc_detail`_"
#~ msgstr ""

#~ msgid "`can_get_all_accounts`_"
#~ msgstr ""

#~ msgid "`can_get_domain_acc_detail`_"
#~ msgstr ""

#~ msgid "`can_get_domain_accounts`_"
#~ msgstr ""

#~ msgid "`can_get_my_acc_detail`_"
#~ msgstr ""

#~ msgid "`can_get_my_account`_"
#~ msgstr ""

#~ msgid "`can_get_all_acc_ast`_"
#~ msgstr ""

#~ msgid "Account Asset"
#~ msgstr ""

#~ msgid "`can_get_domain_acc_ast`_"
#~ msgstr ""

#~ msgid "`can_get_my_acc_ast`_"
#~ msgstr ""

#~ msgid "`can_get_all_acc_ast_txs`_"
#~ msgstr ""

#~ msgid "Account Asset Transaction"
#~ msgstr ""

#~ msgid "`can_get_domain_acc_ast_txs`_"
#~ msgstr ""

#~ msgid "`can_get_my_acc_ast_txs`_"
#~ msgstr ""

#~ msgid "`can_get_all_acc_txs`_"
#~ msgstr ""

#~ msgid "Account Transaction"
#~ msgstr ""

#~ msgid "`can_get_domain_acc_txs`_"
#~ msgstr ""

#~ msgid "`can_get_my_acc_txs`_"
#~ msgstr ""

#~ msgid "`can_read_assets`_"
#~ msgstr ""

#~ msgid "`can_get_blocks`_"
#~ msgstr ""

#~ msgid "Block Stream"
#~ msgstr ""

#~ msgid "`can_get_roles`_"
#~ msgstr ""

#~ msgid "`can_get_all_signatories`_"
#~ msgstr ""

#~ msgid "`can_get_domain_signatories`_"
#~ msgstr ""

#~ msgid "`can_get_my_signatories`_"
#~ msgstr ""

#~ msgid "`can_get_all_txs`_"
#~ msgstr ""

#~ msgid "`can_get_my_txs`_"
#~ msgstr ""

#~ msgid "Command-related permissions"
#~ msgstr ""

#~ msgid "can_create_account"
#~ msgstr ""

#~ msgid ""
#~ "Allows creating new `accounts "
#~ "<../core_concepts/glossary.html#account>`__."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Create Account "
#~ "<../api/commands.html#create-account>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kCreateAccount``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kCreateAccount``"
#~ msgstr ""

#~ msgid "**Example**"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain \"test\" that "
#~ "contains only can_create_account permission "
#~ "and Alice account in that domain. "
#~ "Alice can create Bob account."
#~ msgstr ""

#~ msgid "can_set_detail"
#~ msgstr ""

#~ msgid ""
#~ "Allows setting `account "
#~ "<../core_concepts/glossary.html#account>`__ detail."
#~ msgstr ""

#~ msgid ""
#~ "The `permission "
#~ "<../core_concepts/glossary.html#permission>`__ allows "
#~ "setting details to other accounts. "
#~ "Another way to set detail without "
#~ "can_set_detail permission is to grant "
#~ "`can_set_my_account_detail`_ permission to someone."
#~ " In order to grant, `transaction "
#~ "<../core_concepts/glossary.html#transaction>`__ creator "
#~ "should have `can_grant_can_set_my_account_detail`_ "
#~ "permission."
#~ msgstr ""

#~ msgid ""
#~ "Transaction creator can always set "
#~ "detail for own account even without "
#~ "that permission."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Set Account Detail"
#~ " <../api/commands.html#set-account-detail>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kSetDetail``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kSetDetail``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain \"test\" that "
#~ "contains only can_set_detail permission and"
#~ " Alice account in that domain. Alice"
#~ " can set detail for Admin account."
#~ msgstr ""

#~ msgid "can_set_my_account_detail"
#~ msgstr ""

#~ msgid "This is a grantable permission."
#~ msgstr ""

#~ msgid ""
#~ "`Permission <../core_concepts/glossary.html#permission>`__ "
#~ "that allows a specified `account "
#~ "<../core_concepts/glossary.html#account>`__ to set "
#~ "details for the another specified "
#~ "account."
#~ msgstr ""

#~ msgid ""
#~ "To grant the permission an account "
#~ "should already have a role with "
#~ "`can_grant_can_set_my_account_detail`_ permission."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Grantable.kSetMyAccountDetail``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Grantable_kSetMyAccountDetail``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain \"test\" that "
#~ "contains only can_grant_can_set_my_account_detail "
#~ "permission and two accounts for Alice"
#~ " and Bob in that domain. Alice "
#~ "grants to Bob can_set_my_account_detail "
#~ "permission. Bob can set detail for "
#~ "Alice account."
#~ msgstr ""

#~ msgid "can_create_asset"
#~ msgstr ""

#~ msgid "Allows creating new `assets <../core_concepts/glossary.html#asset>`__."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Create Asset "
#~ "<../api/commands.html#create-asset>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kCreateAsset``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kCreateAsset``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain \"test\" that "
#~ "contains only can_create_asset permission and"
#~ " Alice account in that domain. Alice"
#~ " can create new assets."
#~ msgstr ""

#~ msgid "can_receive"
#~ msgstr ""

#~ msgid ""
#~ "Allows `account "
#~ "<../core_concepts/glossary.html#account>`__ receive "
#~ "`assets <../core_concepts/glossary.html#asset>`__."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Transfer Asset "
#~ "<../api/commands.html#transfer-asset>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kReceive``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kReceive``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain \"test\" that "
#~ "contains can_receive and can_transfer "
#~ "permissions and two accounts for Alice"
#~ " and Bob. Admin creates \"coin\" "
#~ "asset, adds some quantity of it "
#~ "and transfers the asset to Alice. "
#~ "Alice can transfer assets to Bob "
#~ "(Alice has can_transfer permission and "
#~ "Bob has can_receive permission)."
#~ msgstr ""

#~ msgid "can_transfer"
#~ msgstr ""

#~ msgid ""
#~ "Allows sending `assets "
#~ "<../core_concepts/glossary.html#asset>`__ from an "
#~ "`account <../core_concepts/glossary.html#account>`__ of"
#~ " `transaction <../core_concepts/glossary.html#transaction>`__"
#~ " creator."
#~ msgstr ""

#~ msgid ""
#~ "You can transfer an asset from one"
#~ " `domain <../core_concepts/glossary.html#domain>`__ to"
#~ " another, even if the other domain"
#~ " does not have an asset with "
#~ "the same name."
#~ msgstr ""

#~ msgid "Destination account should have `can_receive`_ permission."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kTransfer``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kTransfer``"
#~ msgstr ""

#~ msgid "can_transfer_my_assets"
#~ msgstr ""

#~ msgid ""
#~ "`Permission <../core_concepts/glossary.html#permission>`__ "
#~ "that allows a specified `account "
#~ "<../core_concepts/glossary.html#account>`__ to transfer"
#~ " `assets <../core_concepts/glossary.html#asset>`__ of"
#~ " another specified account."
#~ msgstr ""

#~ msgid "See the example (to be done) for the usage details."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Grantable.kTransferMyAssets``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Grantable_kTransferMyAssets``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain \"test\" that "
#~ "contains can_grant_can_transfer_my_assets, can_receive,"
#~ " can_transfer permissions and two accounts"
#~ " for Alice and Bob in that "
#~ "domain. Admin issues some amount of "
#~ "\"coin\" asset and transfers it to "
#~ "Alice. Alice grants to Bob "
#~ "can_transfer_my_assets permission. Bob can "
#~ "transfer Alice's assets to any account"
#~ " that has can_receive permission, for "
#~ "example, to Admin."
#~ msgstr ""

#~ msgid "can_add_asset_qty"
#~ msgstr ""

#~ msgid "Allows issuing `assets <../core_concepts/glossary.html#asset>`__."
#~ msgstr ""

#~ msgid ""
#~ "The corresponding `command "
#~ "<../core_concepts/glossary.html#command>`__ can be "
#~ "executed only for an `account "
#~ "<../core_concepts/glossary.html#account>`__ of "
#~ "`transaction <../core_concepts/glossary.html#transaction>`__ "
#~ "creator and only if that account "
#~ "has a `role <../core_concepts/glossary.html#role>`__"
#~ " with the `permission "
#~ "<../core_concepts/glossary.html#permission>`__."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Add Asset Quantity"
#~ " <../api/commands.html#add-asset-quantity>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kAddAssetQty``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kAddAssetQty``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain \"test\" that "
#~ "contains only can_add_asset_qty permission and"
#~ " Alice account in that domain. Admin"
#~ " craetes \"coin\" asset. Alice can "
#~ "add to own account any amount of"
#~ " any asset (e.g. \"coin\" asset)."
#~ msgstr ""

#~ msgid "can_subtract_asset_qty"
#~ msgstr ""

#~ msgid "Allows burning `assets <../core_concepts/glossary.html#asset>`__."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Subtract Asset "
#~ "Quantity <../api/commands.html#subtract-asset-"
#~ "quantity>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kSubtractAssetQty``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kSubtractAssetQty``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain \"test\" that "
#~ "contains only can_subtract_asset_qty permission "
#~ "and Alice account in that domain. "
#~ "Admin issues some amount of \"coin\" "
#~ "asset and transfers some amount of "
#~ "\"coin\" asset to Alice. Alice can "
#~ "burn any amount of \"coin\" assets."
#~ msgstr ""

#~ msgid "can_add_domain_asset_qty"
#~ msgstr ""

#~ msgid ""
#~ "Allows issuing `assets "
#~ "<../core_concepts/glossary.html#asset>`__ only in "
#~ "own `domain <../core_concepts/glossary.html#domain>`__."
#~ msgstr ""

#~ msgid ""
#~ "The corresponding `command "
#~ "<../core_concepts/glossary.html#command>`__ can be "
#~ "executed only for an `account "
#~ "<../core_concepts/glossary.html#account>`__ of "
#~ "`transaction <../core_concepts/glossary.html#transaction>`__ "
#~ "creator and only if that account "
#~ "has a `role <../core_concepts/glossary.html#role>`__"
#~ " with the `permission "
#~ "<../core_concepts/glossary.html#permission>`__ and only"
#~ " for assets in creator’s domain."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kAddDomainAssetQty``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kAddDomainAssetQty``"
#~ msgstr ""

#~ msgid "can_subtract_domain_asset_qty"
#~ msgstr ""

#~ msgid ""
#~ "Allows burning `assets "
#~ "<../core_concepts/glossary.html#asset>`__ only in "
#~ "own `domain <../core_concepts/glossary.html#domain>`__."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kSubtractDomainAssetQty``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kSubtractDomainAssetQty``"
#~ msgstr ""

#~ msgid "can_create_domain"
#~ msgstr ""

#~ msgid ""
#~ "Allows creating new `domains "
#~ "<../core_concepts/glossary.html#domain>`__ within the "
#~ "system."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Create Domain "
#~ "<../api/commands.html#create-domain>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kCreateDomain``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kCreateDomain``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain that contains only"
#~ " can_create_domain permission and Alice "
#~ "account in that domain. Alice can "
#~ "create new domains."
#~ msgstr ""

#~ msgid "can_grant_can_add_my_signatory"
#~ msgstr ""

#~ msgid ""
#~ "Allows `role <../core_concepts/glossary.html#role>`__ "
#~ "owners grant `can_add_my_signatory`_ `permission "
#~ "<../core_concepts/glossary.html#permission>`__."
#~ msgstr ""

#~ msgid ""
#~ "Related API methods: `Grant Permission "
#~ "<../api/commands.html#grant-permission>`__, `Revoke "
#~ "Permission <../api/commands.html#revoke-permission>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kAddMySignatory``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kAddMySignatory``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain that contains only"
#~ " can_grant_can_add_my_signatory permission and "
#~ "two accounts for Alice and Bob in"
#~ " that domain. Alice can grant to "
#~ "Bob and revoke can_add_my_signatory "
#~ "permission."
#~ msgstr ""

#~ msgid "can_grant_can_remove_my_signatory"
#~ msgstr ""

#~ msgid ""
#~ "Allows `role <../core_concepts/glossary.html#role>`__ "
#~ "owners grant `can_remove_my_signatory`_ `permission"
#~ " <../core_concepts/glossary.html#permission>`__."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kRemoveMySignatory``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kRemoveMySignatory``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain that contains only"
#~ " can_grant_can_remove_my_signatory permission and "
#~ "two accounts for Alice and Bob in"
#~ " that domain. Alice can grant to "
#~ "Bob and revoke can_remove_my_signatory "
#~ "permission."
#~ msgstr ""

#~ msgid "can_grant_can_set_my_account_detail"
#~ msgstr ""

#~ msgid ""
#~ "Allows `role <../core_concepts/glossary.html#role>`__ "
#~ "owners grant `can_set_my_account_detail`_ "
#~ "`permission <../core_concepts/glossary.html#permission>`__."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kSetMyAccountDetail``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kSetMyAccountDetail``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain that contains only"
#~ " can_grant_can_set_my_account_detail permission and "
#~ "two accounts for Alice and Bob in"
#~ " that domain. Alice can grant to "
#~ "Bob and revoke can_set_my_account_detail "
#~ "permission."
#~ msgstr ""

#~ msgid "can_grant_can_set_my_quorum"
#~ msgstr ""

#~ msgid ""
#~ "Allows `role <../core_concepts/glossary.html#role>`__ "
#~ "owners grant `can_set_my_quorum`_ `permission "
#~ "<../core_concepts/glossary.html#permission>`__."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kSetMyQuorum``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kSetMyQuorum``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain that contains only"
#~ " can_grant_can_set_my_quorum permission and two"
#~ " accounts for Alice and Bob in "
#~ "that domain. Alice can grant to "
#~ "Bob and revoke can_set_my_quorum permission."
#~ msgstr ""

#~ msgid "can_grant_can_transfer_my_assets"
#~ msgstr ""

#~ msgid ""
#~ "Allows `role <../core_concepts/glossary.html#role>`__ "
#~ "owners grant `can_transfer_my_assets`_ `permission"
#~ " <../core_concepts/glossary.html#permission>`__."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kTransferMyAssets``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kTransferMyAssets``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain that contains only"
#~ " can_grant_can_transfer_my_assets permission and "
#~ "two accounts for Alice and Bob in"
#~ " that domain. Alice can grant to "
#~ "Bob and revoke can_transfer_my_assets "
#~ "permission."
#~ msgstr ""

#~ msgid "can_add_peer"
#~ msgstr ""

#~ msgid ""
#~ "Allows adding `peers "
#~ "<../core_concepts/glossary.html#peer>`__ to the "
#~ "network."
#~ msgstr ""

#~ msgid ""
#~ "A new peer will be a valid "
#~ "participant in the next `consensus "
#~ "<../core_concepts/glossary.html#consensus>`__ round after"
#~ " an agreement on `transaction "
#~ "<../core_concepts/glossary.html#transaction>`__ containing "
#~ "\"addPeer\" `command "
#~ "<../core_concepts/glossary.html#command>`__."
#~ msgstr ""

#~ msgid "Related API method: `Add Peer <../api/commands.html#add-peer>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kAddPeer``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kAddPeer``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain that contains only"
#~ " can_add_peer permission and Alice account"
#~ " in that domain. Alice can add "
#~ "new peers."
#~ msgstr ""

#~ msgid "can_append_role"
#~ msgstr ""

#~ msgid ""
#~ "Allows appending `roles "
#~ "<../core_concepts/glossary.html#role>`__ to another "
#~ "`account <../core_concepts/glossary.html#account>`__."
#~ msgstr ""

#~ msgid ""
#~ "You can append only that role that"
#~ " has lesser or the same set of"
#~ " privileges as `transaction "
#~ "<../core_concepts/glossary.html#transaction>`__ creator."
#~ msgstr ""

#~ msgid "Related API method: `Append Role <../api/commands.html#append-role>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kAppendRole``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kAppendRole``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domian that contains "
#~ "can_append_role and can_add_peer permissions "
#~ "and two accounts for Alice and Bob"
#~ " in that domain. Admin creates the"
#~ " second role that contains only "
#~ "can_add_peer permission. Alice can append "
#~ "role to Bob."
#~ msgstr ""

#~ msgid "can_create_role"
#~ msgstr ""

#~ msgid ""
#~ "Allows creating a new `role "
#~ "<../core_concepts/glossary.html#role>`__ within a "
#~ "system."
#~ msgstr ""

#~ msgid ""
#~ "Possible set of `permissions "
#~ "<../core_concepts/glossary.html#permission>`__ for a "
#~ "new role is limited to those "
#~ "permissions that `transaction "
#~ "<../core_concepts/glossary.html#transaction>`__ creator "
#~ "has."
#~ msgstr ""

#~ msgid "Related API method: `Create Role <../api/commands.html#create-role>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kCreateRole``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kCreateRole``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain that contains only"
#~ " can_create_role permission and Alice "
#~ "account in that domain. Alice can "
#~ "create new roles."
#~ msgstr ""

#~ msgid "can_detach_role"
#~ msgstr ""

#~ msgid ""
#~ "Allows revoking a `role "
#~ "<../core_concepts/glossary.html#role>`__ from a "
#~ "user."
#~ msgstr ""

#~ msgid ""
#~ "Due to a known issue the "
#~ "permission allows to detach any role "
#~ "without limitations "
#~ "https://soramitsu.atlassian.net/browse/IR-1468"
#~ msgstr ""

#~ msgid "Related API method: `Detach Role <../api/commands.html#detach-role>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kDetachRole``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kDetachRole``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain that contains only"
#~ " can_detach_role permission and creates "
#~ "Alice account in that domain. Admin "
#~ "has two roles test_role and admin_role."
#~ " Alice can detach test_role from "
#~ "Admin account."
#~ msgstr ""

#~ msgid "can_add_my_signatory"
#~ msgstr ""

#~ msgid ""
#~ "`Permission <../core_concepts/glossary.html#permission>`__ "
#~ "that allows a specified `account "
#~ "<../core_concepts/glossary.html#account>`__ to add "
#~ "an extra public key to the another"
#~ " specified account."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Add Signatory "
#~ "<../api/commands.html#add-signatory>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Grantable.kAddMySignatory``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Grantable_kAddMySignatory``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain that contains only"
#~ " can_grant_can_add_my_signatory permission and "
#~ "two accounts for Alice and Bob in"
#~ " that domain. Alice can grant to "
#~ "Bob can_add_my_signatory permission. Bob can"
#~ " add an extra key to Alice "
#~ "account."
#~ msgstr ""

#~ msgid "can_add_signatory"
#~ msgstr ""

#~ msgid ""
#~ "Allows linking additional public keys to"
#~ " `account <../core_concepts/glossary.html#account>`__."
#~ msgstr ""

#~ msgid ""
#~ "The corresponding `command "
#~ "<../core_concepts/glossary.html#command>`__ can be "
#~ "executed only for an account of "
#~ "`transaction <../core_concepts/glossary.html#transaction>`__ "
#~ "creator and only if that account "
#~ "has a `role <../core_concepts/glossary.html#role>`__"
#~ " with the `permission "
#~ "<../core_concepts/glossary.html#permission>`__."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kAddSignatory``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kAddSignatory``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain that contains only"
#~ " can_add_signatory permission and Alice "
#~ "account in that domain. Alice can "
#~ "add to own account additional keys."
#~ msgstr ""

#~ msgid "can_remove_my_signatory"
#~ msgstr ""

#~ msgid ""
#~ "`Permission <../core_concepts/glossary.html#permission>`__ "
#~ "that allows a specified `account "
#~ "<../core_concepts/glossary.html#account>`__ remove public"
#~ " key from the another specified "
#~ "account."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Remove Signatory "
#~ "<../api/commands.html#remove-signatory>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Grantable.kRemoveMySignatory``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Grantable_kRemoveMySignatory``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain that contains "
#~ "can_add_signatory and can_grant_can_remove_my_signatory"
#~ " permissions and two accounts for "
#~ "Alice and Bob. Alice grants "
#~ "can_remove_my_signatory permission to Bob and"
#~ " adds additional key to own account."
#~ " Bob can remove one of Alice's "
#~ "keys."
#~ msgstr ""

#~ msgid "can_remove_signatory"
#~ msgstr ""

#~ msgid ""
#~ "Allows unlinking additional public keys "
#~ "from an `account "
#~ "<../core_concepts/glossary.html#account>`__."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kRemoveSignatory``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kRemoveSignatory``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domian that contains "
#~ "can_remove_signatory permission and Alice "
#~ "account in that domain. Admin adds "
#~ "an extra key to Alice account. "
#~ "Alice can remove one of the keys."
#~ msgstr ""

#~ msgid "can_set_my_quorum"
#~ msgstr ""

#~ msgid ""
#~ "`Permission <../core_concepts/glossary.html#permission>`__ "
#~ "that allows a specified `account "
#~ "<../core_concepts/glossary.html#account>`__ to set "
#~ "`quorum <../core_concepts/glossary.html#quorum>`__ for "
#~ "the another specified account."
#~ msgstr ""

#~ msgid "Account should have greater or equal amount of keys than quorum."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Set Account Quorum"
#~ " <../api/commands.html#set-account-quorum>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Grantable.kSetMyQuorum``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Grantable_kSetMyQuorum``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain that contains "
#~ "can_grant_can_set_my_quorum and can_add_signatory "
#~ "permissions and create two accounts for"
#~ " Alice and Bob in that domain. "
#~ "Alice grants to Bob can_set_my_qourum "
#~ "permission and adds an extra key "
#~ "to account. Bob can set quorum for"
#~ " Alice."
#~ msgstr ""

#~ msgid "can_set_quorum"
#~ msgstr ""

#~ msgid "Allows setting `quorum <../core_concepts/glossary.html#quorum>`__."
#~ msgstr ""

#~ msgid ""
#~ "At least the same number (or more)"
#~ " of public keys should be already "
#~ "linked to an `account "
#~ "<../core_concepts/glossary.html#account>`__."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kSetQuorum``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kSetQuorum``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates domain that contains only"
#~ " can_set_quorum permission and creates "
#~ "Alice account in that domain. Admin "
#~ "adds an extra key for Alice "
#~ "account. Alice can set quorum equals "
#~ "two."
#~ msgstr ""

#~ msgid "Query-related permissions"
#~ msgstr ""

#~ msgid "can_get_all_acc_detail"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting all the details set "
#~ "to any `account "
#~ "<../core_concepts/glossary.html#account>`__ within the "
#~ "system."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Get Account Detail"
#~ " <../api/queries.html#get-account-detail>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetAllAccDetail``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetAllAccDetail``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in a "
#~ "diffrerent domain that has only "
#~ "can_get_all_acc_detail permission. Alice can "
#~ "access details set to Admin account."
#~ msgstr ""

#~ msgid "can_get_all_accounts"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting `account "
#~ "<../core_concepts/glossary.html#account>`__ information: "
#~ "`quorum <../core_concepts/glossary.html#quorum>`__ and "
#~ "all the details related to the "
#~ "account."
#~ msgstr ""

#~ msgid ""
#~ "With this `permission "
#~ "<../core_concepts/glossary.html#permission>`__, `query "
#~ "<../core_concepts/glossary.html#query>`__ creator can "
#~ "get information about any account within"
#~ " a system."
#~ msgstr ""

#~ msgid ""
#~ "All the details (set by the "
#~ "account owner or owners of other "
#~ "accounts) will be returned."
#~ msgstr ""

#~ msgid "Related API method: `Get Account <../api/queries.html#get-account>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetAllAccounts``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetAllAccounts``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in a "
#~ "different domain that has only "
#~ "can_get_all_accounts permission. Alice can "
#~ "access account information of Admin."
#~ msgstr ""

#~ msgid "can_get_domain_acc_detail"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting all the details set "
#~ "to any `account "
#~ "<../core_concepts/glossary.html#account>`__ within the "
#~ "same `domain <../core_concepts/glossary.html#domain>`__"
#~ " as a domain of `query "
#~ "<../core_concepts/glossary.html#query>`__ creator account."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetDomainAccDetail``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetDomainAccDetail``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in the "
#~ "same domain that has only "
#~ "can_get_domain_acc_detail permission. Alice can "
#~ "get details set to Admin account."
#~ msgstr ""

#~ msgid "can_get_domain_accounts"
#~ msgstr ""

#~ msgid ""
#~ "With this `permission "
#~ "<../core_concepts/glossary.html#permission>`__, `query "
#~ "<../core_concepts/glossary.html#query>`__ creator can "
#~ "get information only about accounts from"
#~ " the same `domain "
#~ "<../core_concepts/glossary.html#domain>`__."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetDomainAccounts``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetDomainAccounts``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in the "
#~ "same domain that has only "
#~ "can_get_domain_accounts. Alice can access "
#~ "account information of Admin."
#~ msgstr ""

#~ msgid "can_get_my_acc_detail"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting all the details set "
#~ "to the `account "
#~ "<../core_concepts/glossary.html#account>`__ of `query "
#~ "<../core_concepts/glossary.html#query>`__ creator."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetMyAccDetail``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetMyAccDetail``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in the "
#~ "domain that has only can_get_my_acc_detail "
#~ "permission. Alice can get details set"
#~ " to own account."
#~ msgstr ""

#~ msgid "can_get_my_account"
#~ msgstr ""

#~ msgid ""
#~ "With this `permission "
#~ "<../core_concepts/glossary.html#permission>`__, `query "
#~ "<../core_concepts/glossary.html#query>`__ creator can "
#~ "get information only about own account."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetMyAccount``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetMyAccount``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in the "
#~ "domain that has only can_get_my_account "
#~ "permission. Alice can access own account"
#~ " information."
#~ msgstr ""

#~ msgid "can_get_all_acc_ast"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting a balance of `assets "
#~ "<../core_concepts/glossary.html#asset>`__ on any "
#~ "`account <../core_concepts/glossary.html#account>`__ "
#~ "within the system."
#~ msgstr ""

#~ msgid ""
#~ "`Query <../core_concepts/glossary.html#query>`__ response"
#~ " will contain information about all "
#~ "the assets that ever been assigned "
#~ "to an account."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Get Account Assets"
#~ " <../api/queries.html#get-account-assets>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetAllAccAst``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetAllAccAst``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in a "
#~ "different domain that has only "
#~ "can_get_all_acc_ast permission. Alice can "
#~ "access assets balance on Admin account."
#~ msgstr ""

#~ msgid "can_get_domain_acc_ast"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting a balance of specified"
#~ " `asset <../core_concepts/glossary.html#asset>`__ on"
#~ " any `account "
#~ "<../core_concepts/glossary.html#account>`__ within the "
#~ "same `domain <../core_concepts/glossary.html#domain>`__"
#~ " as a domain of `query "
#~ "<../core_concepts/glossary.html#query>`__ creator account."
#~ msgstr ""

#~ msgid ""
#~ "Query response will contain information "
#~ "about all the assets that ever "
#~ "been assigned to an account."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetDomainAccAst``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetDomainAccAst``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in the "
#~ "same domain that has only "
#~ "can_get_domain_acc_ast permission. Alice can "
#~ "access assets balance on Admin account."
#~ msgstr ""

#~ msgid "can_get_my_acc_ast"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting a balance of specified"
#~ " `asset <../core_concepts/glossary.html#asset>`__ on"
#~ " `account <../core_concepts/glossary.html#account>`__ "
#~ "of `query <../core_concepts/glossary.html#query>`__ "
#~ "creator."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetMyAccAst``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetMyAccAst``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in a "
#~ "domain that has only can_get_my_acc_ast "
#~ "permission. Alice can access assets "
#~ "balance on own account."
#~ msgstr ""

#~ msgid "can_get_all_acc_ast_txs"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting `transactions "
#~ "<../core_concepts/glossary.html#transaction>`__ associated "
#~ "with a specified `asset "
#~ "<../core_concepts/glossary.html#asset>`__ and any "
#~ "`account <../core_concepts/glossary.html#account>`__ "
#~ "within the system."
#~ msgstr ""

#~ msgid "Incoming asset transfers will also appear in the query response."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Get Account Asset"
#~ " Transactions <../api/queries.html#get-account-"
#~ "asset-transactions>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetAllAccAstTxs``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetAllAccAstTxs``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in a "
#~ "different domain that has "
#~ "can_get_all_acc_ast_txs, can_receive and "
#~ "can_transfer permissions. Admin issues some"
#~ " amount of coins and transfers them"
#~ " to Alice. Alice can query all "
#~ "transactions related to coins and Admin"
#~ " account."
#~ msgstr ""

#~ msgid "can_get_domain_acc_ast_txs"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting `transactions "
#~ "<../core_concepts/glossary.html#transaction>`__ associated "
#~ "with a specified `asset "
#~ "<../core_concepts/glossary.html#asset>`__ and an "
#~ "`account <../core_concepts/glossary.html#account>`__ from"
#~ " the same `domain "
#~ "<../core_concepts/glossary.html#domain>`__ as `query "
#~ "<../core_concepts/glossary.html#query>`__ creator."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetDomainAccAstTxs``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetDomainAccAstTxs``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice in the same "
#~ "domain that has only "
#~ "can_get_domain_acc_ast_txs permission. Admin issues"
#~ " some amount of coins and transfers"
#~ " them to Alice. Alice can query "
#~ "all transactions related to coins and"
#~ " Admin account."
#~ msgstr ""

#~ msgid "can_get_my_acc_ast_txs"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting `transactions "
#~ "<../core_concepts/glossary.html#transaction>`__ associated "
#~ "with the `account "
#~ "<../core_concepts/glossary.html#account>`__ of `query "
#~ "<../core_concepts/glossary.html#query>`__ creator and "
#~ "specified `asset "
#~ "<../core_concepts/glossary.html#asset>`__."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetMyAccAstTxs``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetMyAccAstTxs``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in a "
#~ "domain that has only can_get_my_acc_ast_txs"
#~ " permission. Admin issues some amount "
#~ "of coins and transfers them to "
#~ "Alice. Alice can query all transactions"
#~ " related to coins and own account."
#~ msgstr ""

#~ msgid "can_get_all_acc_txs"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting all `transactions "
#~ "<../core_concepts/glossary.html#transaction>`__ issued by"
#~ " any `account "
#~ "<../core_concepts/glossary.html#account>`__ within the "
#~ "system."
#~ msgstr ""

#~ msgid ""
#~ "Incoming asset transfer inside a "
#~ "transaction would NOT lead to an "
#~ "appearance of the transaction in the "
#~ "command output."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Get Account "
#~ "Transactions <../api/queries.html#get-account-"
#~ "transactions>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetAllAccTxs``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetAllAccTxs``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in a "
#~ "different domain that has only "
#~ "can_get_all_acc_txs permiison. Alice can "
#~ "request all the transactions issues by"
#~ " Admin."
#~ msgstr ""

#~ msgid "can_get_domain_acc_txs"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting all `transactions "
#~ "<../core_concepts/glossary.html#transaction>`__ issued by"
#~ " any `account "
#~ "<../core_concepts/glossary.html#account>`__ from the "
#~ "same `domain <../core_concepts/glossary.html#domain>`__"
#~ " as `query <../core_concepts/glossary.html#query>`__"
#~ " creator."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetDomainAccTxs``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetDomainAccTxs``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in the "
#~ "same domain that has only "
#~ "can_get_domain_acc_txs permission. Alice can "
#~ "request all the transactions issued by"
#~ " Admin."
#~ msgstr ""

#~ msgid "can_get_my_acc_txs"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting all `transactions "
#~ "<../core_concepts/glossary.html#transaction>`__ issued by"
#~ " an `account "
#~ "<../core_concepts/glossary.html#account>`__ of `query "
#~ "<../core_concepts/glossary.html#query>`__ creator."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetMyAccTxs``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetMyAccTxs``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in a "
#~ "domain that has only can_get_my_acc_txs "
#~ "permission. Alice can get all "
#~ "transactions issued by own account."
#~ msgstr ""

#~ msgid "can_read_assets"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting information about `asset "
#~ "<../core_concepts/glossary.html#asset>`__ precision."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Get Asset Info "
#~ "<../api/queries.html#get-asset-info>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kReadAssets``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kReadAssets``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in a "
#~ "domain that has can_read_assets permissions."
#~ " Alice can query information about "
#~ "any asset."
#~ msgstr ""

#~ msgid "can_get_blocks"
#~ msgstr ""

#~ msgid ""
#~ "Allows subscription to the stream of "
#~ "accepted `blocks "
#~ "<../core_concepts/glossary.html#block>`__."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetBlocks``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetBlocks``"
#~ msgstr ""

#~ msgid "can_get_roles"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting a list of `roles "
#~ "<../core_concepts/glossary.html#role>`__ within the "
#~ "system. Allows getting a list of "
#~ "`permissions <../core_concepts/glossary.html#permission>`__ "
#~ "associated with a role."
#~ msgstr ""

#~ msgid ""
#~ "Related API methods: `Get Roles "
#~ "<../api/queries.html#get-roles>`__, `Get Role "
#~ "Permissions <../api/queries.html#get-role-"
#~ "permissions>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetRoles``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetRoles``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in a "
#~ "domain that has can_get_roles permission. "
#~ "Alice can query list of all "
#~ "existing roles. Alice can query list "
#~ "of permissions contained in any role."
#~ msgstr ""

#~ msgid "can_get_all_signatories"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting a list of public "
#~ "keys linked to an `account "
#~ "<../core_concepts/glossary.html#account>`__ within the "
#~ "system."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Get Signatories "
#~ "<../api/queries.html#get-signatories>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetAllSignatories``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetAllSignatories``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in a "
#~ "different domain that has only "
#~ "can_get_all_signatories permission. Alice can "
#~ "query a list of public keys "
#~ "related to Admin account."
#~ msgstr ""

#~ msgid "can_get_domain_signatories"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting a list of public "
#~ "keys of any `account "
#~ "<../core_concepts/glossary.html#account>`__ within the "
#~ "same `domain <../core_concepts/glossary.html#domain>`__"
#~ " as the domain of `query "
#~ "<../core_concepts/glossary.html#query>`__ creator account."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetDomainSignatories``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetDomainSignatories``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in the "
#~ "same domain that has only "
#~ "can_get_domain_signatories permission. Alice can "
#~ "query a list of public keys "
#~ "related to Admin account."
#~ msgstr ""

#~ msgid "can_get_my_signatories"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting a list of public "
#~ "keys of `query "
#~ "<../core_concepts/glossary.html#query>`__ creator `account"
#~ " <../core_concepts/glossary.html#account>`__."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetMySignatories``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetMySignatories``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in a "
#~ "domain that has only can_get_my_signatories"
#~ " permission. Alice can query a list"
#~ " of public keys related to own "
#~ "account."
#~ msgstr ""

#~ msgid "can_get_all_txs"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting any `transaction "
#~ "<../core_concepts/glossary.html#transaction>`__ by hash."
#~ msgstr ""

#~ msgid ""
#~ "Related API method: `Get Transactions "
#~ "<../api/queries.html#get-transactions>`__"
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetAllTxs``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetAllTxs``"
#~ msgstr ""

#~ msgid ""
#~ "Admin issues several transactions and "
#~ "creates Alice account in a different "
#~ "domain that has only can_get_all_txs "
#~ "permission. Alice (knowing transactions "
#~ "hashes) can query transactions issued by"
#~ " Admin Account."
#~ msgstr ""

#~ msgid "can_get_my_txs"
#~ msgstr ""

#~ msgid ""
#~ "Allows getting `transaction "
#~ "<../core_concepts/glossary.html#transaction>`__ (that was"
#~ " issued by `query "
#~ "<../core_concepts/glossary.html#query>`__ creator) by "
#~ "hash."
#~ msgstr ""

#~ msgid "Usage in Java bindings: ``Role.kGetMyTxs``"
#~ msgstr ""

#~ msgid "Usage in Python bindings: ``Role_kGetMyTxs``"
#~ msgstr ""

#~ msgid ""
#~ "Admin creates Alice account in a "
#~ "different domain. Alice (knowing transactions"
#~ " hashes) issues several transactions. Alice"
#~ " can query own transactions."
#~ msgstr ""

#~ msgid "Supplementary Sources"
#~ msgstr ""

#~ msgid "commons.py"
#~ msgstr ""

#~ msgid "consts.py"
#~ msgstr ""

